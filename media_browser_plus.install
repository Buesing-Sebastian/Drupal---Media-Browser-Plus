<?php
// $Id$

/**
 * @file
 * Install file for media_browser_plus.
 *
 */

/**
 * Implements hook_install().
 */
function media_browser_plus_install() {
  // Make sure the standard 'field_tags' field exists.
  _media_browser_plus_ensure_field_tags();
  _media_browser_plus_ensure_field_folder();
}

/**
 * Make sure the field_tags field exists and is of the right type.
 */
function _media_browser_plus_ensure_field_tags() {
  // Make sure the 'tags' vocabulary exists.
  $vocabulary = taxonomy_vocabulary_machine_name_load('tags');
  if (!$vocabulary) {
    $description = st('Use tags to group articles on similar topics into categories.');
    $help = st('Enter a comma-separated list of words to describe your content.');
    $vocabulary = (object) array(
      'name' => 'Tags',
      'description' => $description,
      'machine_name' => 'tags',
      'help' => $help,
    );
    taxonomy_vocabulary_save($vocabulary);
  }

  $field = array (
    'entity_type' => 'media',
    'field_name' => 'field_tags',
    'type' => 'taxonomy_term_reference',
    'cardinality' => '-1',
    'label' => 'Tags',
    'widget' => array (
      'weight' => '-4',
      'type' => 'taxonomy_autocomplete',
      'module' => 'taxonomy',
      'active' => 0,
      'settings' => array (
        'size' => 60,
        'autocomplete_path' => 'taxonomy/autocomplete',
      ),
    ),
    'settings' => array (
      'allowed_values' => array (
        '0' => array (
          'vocabulary' => 'tags',
          'parent' => 0,
        ),
      ),

    ),
    'display' => array (
      'default' => array (
        'label' => 'above',
        'type' => 'taxonomy_term_reference_link',
        'settings' => array (),
        'module' => 'taxonomy',
        'weight' => 1,
      ),
    ),
    'required' => 0,
    'description' => '',
    'default_value' => '',
  );
  _media_browser_plus_ensure_field($field);
  // ensure instance for each media bundle
  foreach (array_keys(media_type_get_types()) as $bundle) {
    $field['bundle'] = $bundle;
    _media_browser_plus_ensure_instance($field);
  }
}

/**
 * Make sure the field_folder field exists and is of the right type.
 */
function _media_browser_plus_ensure_field_folder() {
  // Make sure the 'media_folders' vocabulary exists.
  $vocabulary = taxonomy_vocabulary_machine_name_load('media_folders');
  if (!$vocabulary) {
    $description = st('Use media folders to organize your media');
    $help = st('Enter a concise name for the media folder');
    $vocabulary = (object) array(
        'name' => 'Media Folders',
        'description' => $description,
        'machine_name' => 'media_folders',
        'hierarchy' => 1,
        'help' => $help,
    );
    taxonomy_vocabulary_save($vocabulary);
  }

  // Create field if necessary
  $field = array(
    'field_name' => 'field_folder',
    'label' => st('Media Folder'),
    'type' => 'taxonomy_term_reference',
    // media file can only be in one folder at a time
    'cardinality' => 1,
    'entity_type' => 'media',
    'required' => TRUE,
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => $vocabulary->machine_name,
          'parent' => 0,
        ),
      ),
    ),
  );
  _media_browser_plus_ensure_field($field);

  // ensure instance for each media bundle
  foreach (array_keys(media_type_get_types()) as $bundle) {
    $field['bundle'] = $bundle;
    $field['bundle'] = $bundle;
    $field['settings']['allowed_values']['vocabulary'] = $vocabulary->machine_name;
    $field['entity_type'] = 'media';
    _media_browser_plus_ensure_instance($field);
  }

  $media_root_term = reset(taxonomy_term_load_multiple(NULL, array('name' => 'Media Root')));
  if (!$media_root_term) {
    // create default folder
    $media_root_term = new stdClass();
    $media_root_term->name = 'Media Root';
    $media_root_term->description = 'default media folder';
    $media_root_term->vid = $vocabulary->vid;
    $media_root_term->weight = '-10';
    // save (default folder) term
    taxonomy_term_save($media_root_term);
  }

  // Assign all existing fields to the default folder
  $assets = media_load_multiple(FALSE);
  foreach ($assets as $media) {
    $media->field_folder = array(
      LANGUAGE_NONE => array(
        array('tid' => $media_root_term->tid),
      ),
    );
    media_save($media);
  }
}

/**
 * Create a field, unless it exists already.
 *
 * Note that it's not necessary to check field type here, as that's done in the
 * requirements step.
 * New fields are stored to be able to make a clean uninstall.
 *
 * @param $field
 *   The field definition.
 */
function _media_browser_plus_ensure_field($field) {
  // Check if field already exists
  $existing_field = field_info_field($field['field_name']);
  if (empty($existing_field)) {
    $installed_fields = variable_get('media_browser_plus_new_fields', array());
    $installed_fields[$field['field_name']] = $field['field_name'];
    $existing_field = field_create_field($field);
    variable_set('media_browser_plus_new_fields', $installed_fields);
  }
  return $existing_field;
}

/**
 * Makes sure an instance of a field exists
 *
 * @param array $instance
 *   Array in the format needed by field_create_instance()
 *
 * @see field_create_instance()
 */
function _media_browser_plus_ensure_instance($instance) {
  $existing_instance = field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle']);
  if (empty($existing_instance)) {
    field_create_instance($instance);
  }
}

/**
 * @TODO: put files into default folders if not yet in any folder
 */
function media_browser_plus_enable() {

}

/**
 * Uninstall actions.
 *
 * Remove fields if they where introduced by this module.
 *
 * @TODO: discuss if this should be done - maybe an additional bundle check
 *   would make sense.
 */
function media_browser_plus_uninstall() {
  foreach (variable_get('media_browser_plus_new_fields', array()) as $field_name) {
    field_delete_field($field_name);
  }
}