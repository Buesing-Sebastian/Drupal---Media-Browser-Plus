<?php
// $Id$

/**
 * @file
 * Adds fields to the media browser forms for better UX
 */


/**
 * Alter the media browser from to enable new UI
 */
function media_browser_plus_form_media_admin_alter(&$form, &$form_state) {
  // not yet implemented for list view
  if($form_state['build_info']['args'][0] != 'thumbnails')
    return;
  // removing the options part
  // this is not needed any more
  unset($form['options']);
  // adding our js and css
  $path = drupal_get_path('module', 'media_browser_plus');
  $form['#attached'] = array_merge($form['#attached'],array(
    'js' => array($path . '/js/media_browser_plus.admin.js', 'http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.6/jquery-ui.min.js')
  ));
  $form['#attached']['css'][] = $path . '/css/media_browser_plus.admin.css';
  // remove all checkboxes from the thumbnails since
  // we operate with drag and drop instead
  foreach($form['admin']['files'] as $key => $file){
    if(is_array($file)){
      $form['admin']['files'][$key]['#type'] = 'hidden';
      $form['admin']['files'][$key]['#value'] = $key;

    }
  }
  // alter the file prefix. UI requires list to have an id
  $form['admin']['files']['#prefix'] = '<div class="media-display-thumbnails media-clear clearfix">
    <ul id="media-admin-gallery" class="media-list-thumbnails">';
  // load the media folders
  $vocabulary = taxonomy_vocabulary_machine_name_load('media_folders');
  $categories = taxonomy_get_tree($vocabulary->vid);
  $list = _media_browser_plus_create_relationship_list($categories);
  $folders = _media_browser_plus_folder_hierarchy_list($list);
  // build the folder form
  $form['admin']['folder'] = array(
    '#type' => 'markup',
    '#markup' => '<div id="folder" style="width: 200px;">' . $folders . ' </div>'
    );
  // setting up the header
  $header = array(
    array(
      'data' => st('Categories'),
      'width' => '200'
    ),
    array(
      'data' => st('Media Files'),
      'width' => '*'
    ));
  // and the date
  $options = array(array(
    'categories' => array('data' => drupal_render($form['admin']['folder']), 'class' => array('media_column')),
    'media' => array('data' => drupal_render($form['admin']['files']), 'class' => array('media_column'))
  ));
  // table setup
  $table = array(
    'header' => $header,
    'rows' => $options,
    'attributes' => array('id' => 'media_folder_table'),
    'empty' => st('No media added yet.')
  );
  // and put everything into a neat little table
  $form['admin'] = array(
    '#type' => 'markup',
    '#markup' => theme('table', $table)
  );
  return $form;
}

/**
 * function called by the JS Fronted via AJAX Request to change the category of a media object
 */
function media_browser_plus_change_category(&$form, &$form_state){
  // parse values
  $folder = (int)(str_replace("folder_load_", "", $form_state['input']['folder']));
  $media = media_load((int) (str_replace("edit-files-", "", $form_state['input']['media'])));
  // apply new folder
  $media->field_folder[LANGUAGE_NONE][0]['tid'] = $folder;
  // save and exit
  media_save($media);
  die("");

	return $form;
}

/**
 * function called by the JS Fronted via AJAX Request to get the media list for a given folder
 */
function media_browser_plus_thumbnailsJSON(&$form, &$form_state){
  // parse values
  if(isset($form_state['input']['folder'])){
    //
    $folder = (int)(str_replace("folder_load_", "", $form_state['input']['folder']));
    //$entity_controller = entity_get_controller('media');
    //$media_entities = $entity_controller->load(FALSE, array(), 0, 50);
    $media_entities = media_load_multiple(FALSE);

    foreach($media_entities as $media)
    {
      if($folder == 0){
        if(!isset($media->field_folder[LANGUAGE_NONE][0]['tid'])){
          //
          $hidden_media_id = array("media_id" => array('#type' => 'hidden', '#value' => $media->fid));
          $return .= "<li>"
            . drupal_render(media_get_thumbnail_preview(media_load($media->fid), TRUE))
            . drupal_render($hidden_media_id)
            . "</li>";
        }
      }
      else{
        if(isset($media->field_folder[LANGUAGE_NONE][0]['tid']) &&
          $media->field_folder[LANGUAGE_NONE][0]['tid'] == $folder){
            //
            $hidden_media_id = array("media_id" => array('#type' => 'hidden', '#value' => $media->fid));
            $return .= "<li>"
              . drupal_render(media_get_thumbnail_preview(media_load($media->fid), TRUE))
              . drupal_render($hidden_media_id)
              . "</li>";
        }
      }
    }

    //echo json_encode(array("name" => "sebbo", "email" => "bamboocha1984@gmx.de", "quotes" => "<a href=\"http://www.sebbo.de\"></a>"));
    echo $return;
  }
  die();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function media_browser_plus_form_media_add_upload_multiple_alter(&$form, &$form_state) {
  // This builds the tags textfield and adds the autocomplete handlers to it.
  // The #element_validate may not be necessary because this never triggers
  // hook_field_update() or hook_field_insert()
  $form['field_tags'] = _media_browser_plus_tag_form();
  $form['field_folder'] = _media_browser_plus_folder_form();
  // Change the weight of the other form items so they appear in the right order
  $form['upload']['#weight'] = 0;
  $form['submit']['#weight'] = 2;

  // Add an additional form submission callback that fires after the default.
  $form['#submit'][] = 'media_browser_plus_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function media_browser_plus_form_media_internet_add_alter(&$form, &$form_state) {
  // Add an additional form submission callback that fires after the default.
  media_browser_plus_form_media_add_upload_alter($form, $form_state);
}

/**
 * Form element validate handler for taxonomy term autocomplete element.
 *
 * Because media_browser_plus_form_media_add_upload_multiple_alter() adds a
 * tags widget to a form that is not an entity editing form, but it is desired
 * for taxonomy_autocomplete_validate() to have access to the settings of the
 * field for which this widget is being added, this handler runs before
 * taxonomy_autocomplete_validate(), and adds the expected information to
 * $form_state, as expected by taxonomy_autocomplete_validate().
 */
function media_browser_plus_prepare_taxonomy_autocomplete_validate($element, &$form_state) {
  $form_state['field'][$element['#field_name']][$element['#language']]['field'] = field_info_field($element['#field_name']);
}

/**
 * Form submit handler for the media browser forms that create new media entities.
 *
 * Enhances the media creation process by populating field content for the newly
 * created entities from user-submitted data and/or data available from a
 * remote provider.
 *
 * @see media_browser_plus_form_media_add_upload_multiple_alter()
 * @see media_browser_plus_form_media_internet_add_alter()
 */
function media_browser_plus_submit($form, &$form_state) {
  // Grab the fids of the newly created media entities from the redirect query
  // string that was created by the form's primary submit handler, and load the
  // corresponding entities.

  $fids = $form_state['redirect'][1]['query']['fid'];
  if (!is_array($fids)) {
    $fids = array($fids);
  }
  $media_entities = media_load_multiple($fids);

  // If tags have been entered, apply them to each new entity.
  if (!empty($form_state['values']['field_tags'])) {
    // Create any new taxonomy terms.
    foreach ($form_state['values']['field_tags'] as $i => &$item) {
      if ($item['tid'] == 'autocreate') {
        $term = (object) $item;
        unset($term->tid);
        taxonomy_term_save($term);
        $item['tid'] = $term->tid;
      }
      unset($item);
    }

    foreach ($media_entities as $media) {
      $media->field_tags[LANGUAGE_NONE] = $form_state['values']['field_tags'];
    }

  }

  // apply folder
  foreach ($media_entities as $media) {
      $media->field_folder[LANGUAGE_NONE] = $form_state['values']['field_folder'];
  }

  // If the new media is from a 3rd party provider, and that provider also
  // provides MRSS data about the media, then populate the title and description
  // fields from that data.
  if (!empty($form_state['values']['embed_code'])) {
    $provider = media_internet_get_provider($form_state['values']['embed_code']);
    if ($data = _media_browser_plus_metadata($provider)) {
      foreach ($data as $field_name => $value) {
        $field = field_info_field($field_name);
        // Limiting value population only if the field is of type 'text' or
        // 'text_long' isn't as extensible as would be ideal, but we need some
        // protection against populating a field with incompatible content.
        if (isset($field) && in_array($field['type'], array('text', 'text_long')) && isset($field['bundles']['media'])) {
          foreach ($media_entities as $media) {
            if (in_array($media->type, $field['bundles']['media']) && !isset($media->{$field_name}[LANGUAGE_NONE][0]['value'])) {
              $media->{$field_name}[LANGUAGE_NONE][0]['value'] = $value;
            }
          }
        }
      }
    }
  }


  foreach ($media_entities as $media) {
    media_save($media);
  }

}

/**
 * Helper function to return metadata that is available from a 3rd party media provider, such as YouTube.
 *
 * @param $provider
 *   A provider object as returned by media_internet_get_provider().
 *
 * @return
 *   An array of media metadata available from the provider, keyed on field
 *   name.
 *
 * @see http://video.search.yahoo.com/mrss
 * @see media_internet_get_provider()
 * @see MediaInternetYouTubeHandler::getMRSS()
 */
function _media_browser_plus_metadata($provider) {
  // @todo This is early, experimental code, still subject to much change. For
  //   now, we assume $provider->getMRSS() returns a SimpleXML element. We'll
  //   want to change this assumption and have it return an array instead, but
  //   that requires fixing media_retrieve_xml() to handle XML namespaces
  //   properly.
  $data = array();
  if (is_callable(array($provider, 'getMRSS')) && ($rss = $provider->getMRSS())) {
    // MRSS is an extension of RSS, so the title field is available in the
    // default (ATOM) namespace.
    $data['media_title'] = (string) $rss->title;
    // The MRSS extensions are in their own namespace.
    $mrss = $rss->children('http://search.yahoo.com/mrss/');
    $data['media_description'] = (string) $mrss->group->description;
  }
  $data = array_filter($data, 'strlen');
  return $data;
}

/**
 * Implements MODULE_preprocess_media_link().
 */
function media_browser_plus_preprocess_media_link(&$variables) {
  // Use the value of the title field, when there is one, as the link text for
  // all links that would otherwise default to the filename.
  // @todo Solve generically using the 'label' key of hook_entity_indo(). See
  //   http://drupal.org/node/910396.
  $media = media_load($variables['file']->fid);
  if (empty($variables['file']->description) && isset($media->media_title[LANGUAGE_NONE][0]['value'])) {
    $variables['file']->description = $media->media_title[LANGUAGE_NONE][0]['value'];
  }
}

/**
 * Implements MODULE_preprocess_media_thubmnail().
 */
function media_browser_plus_preprocess_media_thumbnail(&$variables) {
  // See media_browser_plus_preprocess_media_link(). Same thing here, but for
  // the links that appear underneath thumbnail previews.
  $media = $variables['element']['#object'];
  if (isset($media->media_title[LANGUAGE_NONE][0]['value'])) {
    $variables['element']['#name'] = $media->media_title[LANGUAGE_NONE][0]['value'];
  }
}

/**
 * Altering the add file upload form the include folder and tag options
 */
function media_browser_plus_form_media_add_upload_alter(&$form, &$form_state) {
  //
  $form['file']['#weight'] = -5;
  $form['submit']['#weight'] = 5;

  $form['field_tags'] = _media_browser_plus_tag_form();
  $form['field_folder'] = _media_browser_plus_folder_form();

  $form['#submit'][] = 'media_browser_plus_submit';
}

/**
 * making sure the tagging form is below the folder form part
 */
function media_browser_plus_form_media_edit_alter(&$form, &$form_state) {
	// setting the weight accordingly
	$form['field_folder']['#weight'] = $form['field_tags']['#weight'] - 1;
}

/**
 * Enter description here ...
 */
function _media_browser_plus_tag_form(){
  return array(
    '#weight' => 1,
    '#language' => LANGUAGE_NONE,
    '#field_name' => 'field_tags',
    '#columns' => array('tid'),
    '#title' => 'Tags',
    '#description' => 'Enter a comma-separated list of words to describe your image.',
    '#required' => FALSE,
    '#delta' => 0,
    '#type' => 'textfield',
    '#default_value' => '',
    '#autocomplete_path' => 'taxonomy/autocomplete/field_tags',
    '#element_validate' => array('media_browser_plus_prepare_taxonomy_autocomplete_validate', 'taxonomy_autocomplete_validate'),
    '#size' => 60,
  );
}

/**
 *
 * Enter description here ...
 */
function _media_browser_plus_folder_form()
{
  $vocabulary = taxonomy_vocabulary_machine_name_load('media_folders');
  $categories = taxonomy_get_tree($vocabulary->vid);

  $list = array();
  $prefixPadding = "-";

  foreach($categories as $category){
  	$pad = (($category->depth * strlen($prefixPadding)) + strlen($category->name));
    $list[$category->tid] = str_pad($category->name, $pad, $prefixPadding, STR_PAD_LEFT);
  }
  return array(
      '#type' => 'select',
      '#language' => LANGUAGE_NONE,
      '#title' => t('Media Folder'),
      '#field_name' => 'field_tags',
      '#weigth' => -2,
      '#options' => $list,
      '#description' => t('Select a folder this file should be put in')
  );
}

/**
 *
 * implement hook menu
 */
function media_browser_plus_menu(){
  $items['admin/content/media/change_category'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_browser_plus_change_category'),
    'file' => 'media_browser_plus.module',
    'access callback' => 'media_access',
    'access arguments' => array('edit')
  );

  $items['admin/content/media/thumbnailsJSON'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_browser_plus_thumbnailsJSON'),
    'file' => 'media_browser_plus.module',
    'access callback' => 'media_access',
    'access arguments' => array('edit')
  );

  return $items;
}

/**
 * creates the folder media tree
 */
function _media_browser_plus_folder_hierarchy_list($list)
{
  if(!isset($list['parents']) || !isset($list['children']))
    return;
  //
  if(count($list['parents']) == 0)
  {
  	return t('No folders created yet');
  }
  else
  {
    //
    if(_media_browser_plus_has_unsorted_media()){
        $all_folders = array();
      $all_folders[0] = new stdClass();
      $all_folders[0]->name = st('Unsorted');
      $all_folders[0]->tid = 0;
      //
      $list['parents'] = array_merge($all_folders, $list['parents']);
    }
    //
    return _media_browser_plus_folder_hierarchy_list_helper($list['parents'], $list['children']);
    //
  }
  //
}

/**
 *
 *
 * @param $parents
 * @param $children
 * @param $hide
 */
function _media_browser_plus_folder_hierarchy_list_helper($parents, &$children, $hide = false)
{
  //
  $path = "http://" . $_SERVER['HTTP_HOST'] . base_path() . drupal_get_path('module', 'media_browser_plus');
  //
  $buffer  = "<ul ";
  $buffer .= $hide ? "" : "id=\"categories-example\" ";
  $buffer .=" class=\"";
  $buffer .= $hide ? "hidden" : "";
  $buffer .= "\">\n";
  //
  foreach($parents as $item)
  {
  	//
  	$hasChildren = isset($children[$item->tid]);
  	//
  	$buffer .= "<li class=\"category";
  	//
  	if($hasChildren)
  	{
  		$buffer .= " parent\">";
  		$buffer .= "<div class=\"folder fparent category-children-toggle\">" .
  				   "<img src=\"".$path."/images/pixel.gif\" border=\"0\" alt=\"\">" .
  				   "</div> ";
  		$buffer .= "<div id=\"folder_load_".$item->tid."\" class=\"folder_load\">" . $item->name . "</div>\n";
  		$buffer .= _media_browser_plus_folder_hierarchy_list_helper($children[$item->tid], $children, true);
  		$buffer .= "</li>\n";
  	}
  	else
  	{
  		$buffer .= "\">";
  		$buffer .= "<div class=\"folder category-children-toggle\">" .
  				   "<img src=\"".$path."/images/pixel.gif\" border=\"0\" alt=\"\">" .
  				   "</div> ";
  		$buffer .= "<div id=\"folder_load_".$item->tid."\" class=\"folder_load\">" . $item->name . "</div></li>\n";
  	}
  }
  //
  $buffer .= "</ul>\n";
  //
  return $buffer;
}

/**
 * helper function
 */
function _media_browser_plus_create_relationship_list($categories, $index = 'tid')
{
  //
  $return 	= array();
  $parents 	= array();
  $children	= array();
  //
  foreach($categories as $key=>$value)
  {
    // root node
    if($value->parents[0] == 0)
    {
      // create parent entry
      $parents[$value->$index] 	= $value;
      // continue loop
      continue;
    }
    else // none root node
    {
      // create child entry
      $children[$value->parents[0]][$value->$index] = $value;
      //
      continue;
    }
  }
  //
  $return['parents'] 	= $parents;
  $return['children'] 	= $children;
  //
  return $return;
  //
}

/**
 * checks for unsorted (i.e. media not in folders) media
 */
function _media_browser_plus_has_unsorted_media(){
  // loading media
  $entity_controller = entity_get_controller('media');
  $media_entities = $entity_controller->load(NULL, array(), 0, 100);
  //
  foreach($media_entities as $media)
  {
  if(!isset($media->field_folder[LANGUAGE_NONE][0]['tid']))
    return true;
  }
  // none found
  return false;
}