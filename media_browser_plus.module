<?php
// $Id$ 

/**
 * @file
 * Adds fields to the media browser forms for better UX
 */


/**
 * Alter the media browser from to enable new UI
 */
function media_browser_plus_form_media_admin_alter(&$form, &$form_state) {
  // add css for both views
  $path = drupal_get_path('module', 'media_browser_plus');
  $form['#attached']['css'][] = $path . '/css/media_browser_plus.admin.css';
  $form['#attached']['css'][] = $path . '/css/colorbox.css';
  $form['#attached']['js'][] = $path . '/js/media_browser_plus.admin.menu.js';
  $form['#attached']['js'][] = $path . '/js/colorbox/jquery.colorbox-min.js';
  // set base href for javascript requests
  $setting = array();
  $setting['media_browser_plus']['filter_active'] = isset($_SESSION['media-filter']);
  $setting['media_browser_plus']['url'] = "http://" . $_SERVER['HTTP_HOST'] . base_path();
  $setting['media_browser_plus']['images_url'] = $setting['media_browser_plus']['url'] . $path . "/images/";
  $setting['media_browser_plus']['page'] = isset($_GET['page']) ? $_GET['page'] : 0;
  $setting['media_browser_plus']['per_page'] = variable_get('media_media_per_page');
  $setting['media_browser_plus']['page_items_per_page'] = variable_get('media_page_items_per_page');
  $setting['media_browser_plus']['browserUrl'] = $setting['media_browser_plus']['url'] . "?q=media/browser&render=media-settings";
  // access settings
  $setting['media_browser_plus']['folder_dnd_enabled'] = media_access('edit');
  $setting['media_browser_plus']['manage_folders'] = media_access('edit folders');
  $setting['media_browser_plus']['filter_allowed'] = media_access('filter');
  $setting['media_browser_plus']['add_files'] = media_access('upload');
  $form['#attached']['js'][] = array(
    'type' => 'setting',
    'data' => $setting,
  );
  // check which mode we are in
  if(isset($form_state['build_info']['args'][0]) && $form_state['build_info']['args'][0] != 'thumbnails')
    return _media_browser_plus_media_admin_list_alter($form, $form_state);
  // check access rights
  if(!media_browser_plus_access('media grid view')) {
    drupal_access_denied();
    return array();
  }
  // adding grid view js and css
  $form['#attached']['js'][] = $path . '/js/media_browser_plus.admin.js';
  drupal_add_library('system', 'ui.draggable');
  drupal_add_library('system', 'ui.droppable');
  // removing options form part
  unset($form['options']);
  if(!media_browser_plus_access('media list view') ||
    !media_browser_plus_access('media grid view'))
    unset($form['switch']);
  // load the media folders
  $vocabulary = taxonomy_vocabulary_machine_name_load('media_folders');
  $folders = taxonomy_get_tree($vocabulary->vid);
  $folders = _media_browser_plus_filter_folders($folders);
  $list = _media_browser_plus_create_relationship_list($folders, TRUE);
  $folders = _media_browser_plus_folder_hierarchy_list($list);
  // build the folder form
  $form['admin']['folder'] = array(
    '#type' => 'markup',
    '#markup' => '<div id="folder" style="height:'.variable_get('media_grid_window_height').'px;">' . $folders . ' </div>'
    );
  $form['admin']['files']['#prefix'] = '<div class="media-display-thumbnails media-clear clearfix">' .
    '<ul class="media-list-thumbnails" style="height:'.variable_get('media_grid_window_height').'px;">';
  // setting up the header
  $header = array(
    array(
      'data' => t('Categories'),
      'width' => '200'
    ),
    array(
      'data' => t('Media Files'),
      'width' => '*'
    ));
  // and the data
  $form['buttons'] = array();
  $form['buttons']['selection_assets'] = array(
      '#type' => 'markup',
      '#markup' => '<a href="#media_folder_table" id="media_main_view_select_all" >' . t('Select All') . '</a>' . 
        '<a href="#media_folder_table" id="media_main_view_deselect_all" >' . t('Deselect All') . '</a>'
    );
  if(media_access('view'))
    $form['buttons']['view_media'] = array(
      '#type' => 'button',
      '#attributes' => array('id' => 'media_buttons_view'),
      '#value' => t('View')
    );
  if(media_access('preview'))
    $form['buttons']['preview_media'] = array(
      '#type' => 'button',
      '#attributes' => array('id' => 'media_buttons_preview'),
      '#value' => t('Preview')
    );
  if(media_access('edit'))
    $form['buttons']['edit_media'] = array(
      '#type' => 'submit',
      '#submit' => array('media_browser_plus_edit_multiple_redirect'),
      '#validate' => array('media_browser_plus_media_admin_validate'),
      '#value' => t('Edit')
    );
  if(media_access('edit')) // edit-submit
    $form['buttons']['delete_media'] = array(
      '#type' => 'submit',
      '#submit' => array('media_browser_plus_delete_multiple_redirect'),
      '#validate' => array('media_browser_plus_media_admin_validate'),
      '#value' => t('Delete')
    );
  $form['buttons']['select_media'] = array(
      '#type' => 'button',
      '#attributes' => array('id' => 'media_buttons_select'),
      '#value' => t('Add to Media Basket'));
  $options = array(array(
      'categories' => array(
        'data' => drupal_render($form['admin']['folder'])),
      'media' => array(
        'data' => '<div class="media-display-thumbnails media-clear clearfix">' .
          '<ul class="media-list-thumbnails" id="media-thumb-list" style="height: '.variable_get('media_grid_window_height').'px;">' .
          '</ul></div>')
    ),array(
      'categories' => array(
        'data' => ''),
      'media' => array(
        'data' => '',
        'id' => array('media_browser_plus_pages'))
    ),array(
      'categories' => array(
        'data' => ''),
      'media' => array(
        'data' => drupal_render($form['buttons']),
        'id' => array('media_browser_plus_selection_panel'))
    )
  );
  // table setup
  $table = array(
    'header' => $header,
    'rows' => $options,
    'attributes' => array('id' => 'media_folder_table'),
    'empty' => t('No media added yet.')
  );
  // add filter
  //$form['filter'] = media_browser_plus_media_filter(array(), $form_state);
  //$form['filter']['#prefix'] = '<div style="margin-right: 90px;">';
  //$form['filter']['#suffix'] = '</div>';
  //$form['filter']['#weight'] = -20;
  //unset($form['filter']);
  // and put everything into a neat little table
  $form['admin'] = array(
    '#type' => 'markup',
    '#markup' => theme('table', $table)
  );
  $header = array(array('data' => t('Media Basket')));
  // and the data
  $form['basket_actions'] = array();
  $form['basket_actions']['selection_assets'] = array(
      '#type' => 'markup',
      '#markup' => '<a href="#media_basket_table" id="media_basket_remove_all" >' . t('Remove All') . '</a>'
    );
  if(media_access('download')) {
    $form['basket_actions']['download'] = array(
        '#type' => 'submit',
        '#value' => t('Download'),
        '#attributes' => array('id' => 'perform_download'),
        '#limit_validation_errors' => array(),
        '#validate' => array('media_browser_plus_media_admin_validate'),
        '#submit' => array('media_browser_plus_download_images_submit')
    );
  }
  $options = array(array(
      'media' => array(
        'data' => '<ul id="media-basket-list" class="media-list-thumbnails"></ul>')
    ),array(
      'media' => array(
        'data' => drupal_render($form['basket_actions']),
        'id' => array('media_browser_plus_basket_panel'))
    )
  );
  // table setup
  $table = array(
    'header' => $header,
    'rows' => $options,
    'attributes' => array('id' => 'media_basket_table'),
    'empty' => t('No media added yet.')
  );
  $form['media-basket'] = array(
    '#type' => 'markup',
    '#markup' => theme('table', $table)
  );
  //
if(media_access('preview')) {
    $header = array(
      array(
        'data' => t('Media Preview'),
        'id' => array('media-preview-label'),));
    // and the data
    $form['preview_actions'] = array(
      'previous' => array(
        '#type' => 'submit',
        '#value' => t('previous'),
        '#attributes' => array('id' => 'previous_preview_item')),
      'select' => array(
        '#type' => 'submit',
        '#value' => t('Select'),
        '#attributes' => array('id' => 'select_preview_item')),
      'next' => array(
        '#type' => 'submit',
        '#value' => t('next'),
        '#attributes' => array('id' => 'next_preview_item'))
    );
    $options = array(array(
        'media' => array(
          'data' => '',
          'id' => array('media_browser_plus_preview_content')
      )),array(
        'media' => array(
          'data' => drupal_render($form['preview_actions']),
          'id' => array('media_browser_plus_preview_panel'))
      )
    );
    // table setup
    $table = array(
      'header' => $header,
      'rows' => $options,
      'attributes' => array('id' => 'media-preview-table'),
      'empty' => t('No media added yet.')
    );
    $form['media-preview'] = array(
      '#type' => 'markup',
      '#markup' => '<div id="media-preview-table-container" style="display: none;">' . theme('table', $table) . '</div>'
    );
  }
  return $form;
}

function media_browser_plus_media_admin_validate($form, &$form_state) {
  //copy input files to values
  if($form_state['values']['op'] != "Download") {
    $form_state['values']['files'] = $form_state['input']['files'];
    // and call the old validate
    media_admin_validate($form, $form_state);
  }
}

function media_browser_plus_edit_multiple_redirect($form, &$form_state) {
  $fids = implode(' ', array_keys(array_filter($form_state['values']['files'])));
  $form_state['redirect'] = array(str_replace('%fids', $fids, 'admin/content/media/edit_multiple/%fids'), array('query' => array('destination' => 'admin/content/media/thumbnails')));
}

function media_browser_plus_delete_multiple_redirect($form, &$form_state) {
  $fids = implode(' ', array_keys(array_filter($form_state['values']['files'])));
  $form_state['redirect'] = array(str_replace('%fids', $fids, 'admin/content/media/delete_multiple/%fids'), array('query' => array('destination' => 'admin/content/media/thumbnails')));
}

function media_browser_plus_download_images_submit($form, &$form_state) {
  if(isset($form_state['input']['selected_media']) && media_access('download')) {
    $ids = array_keys($form_state['input']['selected_media']);
    // only load those
    $conditions[] = array("property" => array("fid", array($ids), "IN"));
    $media_entities = media_browser_plus_load_multiple(array("conditions" =>$conditions, 'apply_filter' => false, 'paging' => false));
    // create archive
    $name = 'media-download-' . md5(microtime() . uniqid());
    $zipFile = '/tmp/'.$name.'.zip';
    $zip = new ZipArchive;
    $res = $zip->open($zipFile, ZipArchive::CREATE);
    if ($res === TRUE && count($media_entities->results)) {
      foreach($media_entities->results as $media) {
        $zip->addFile(drupal_realpath($media->uri), $media->filename);
      }
      $zip->close();
      header("Content-type: application/zip");
      header("Content-Disposition: attachment; filename=$zipFile");
      header("Pragma: no-cache");
      header("Expires: 0");
      readfile($zipFile);
      unlink($zipFile);
      die();
    } else {
      drupal_set_message(t('Failed to create download archive'), 'error');
    }
  }
}

/**
 * used to alter the media list display
 */
function _media_browser_plus_media_admin_list_alter(&$form, &$form_state){
  // check access rights
  if(!media_browser_plus_access('media list view')) {
    drupal_access_denied();
    return array();
  }
  $header = array(
    'title' => array(
      'data' => t('Title'),
      'specifier' => 'filename',
      'type' => 'property',
      'field' => 'f.filename'),
    'type' => array(
      'data' => t('Type'),
      'specifier' => 'filemime',
      'type' => 'property',
      'field' => 'f.filemime'),
    'folder' => array(
      'data' => t('Folder'),
      'specifier' => array(
        'field' => 'field_folder',
        'column' => 'tid'),
      'type' => 'field'),
    'size' => array(
      'data' => t('Size'),
      'specifier' => 'filesize',
      'type' => 'property',
      'field' => 'f.filesize'),
    'author' => array(
      'data' => t('Author'),
      'specifier' => 'uid',
      'type' => 'property',
      'field' => 'u.name'),
    'timestamp' => array(
      'data' => t('Updated'),
      'specifier' => 'timestamp',
      'type' => 'property',
      'sort' => 'desc',
      'field' => 'f.timestamp'),
    'operations' => array(
      'data' => t('Operations')),
  );
  $destination = drupal_get_destination();
  $options = array();
  $media_entities = media_browser_plus_load_multiple(array("conditions" => array(), "header" => $header));
  // gather the data from each media object
  foreach($media_entities->results as $media){
    // load folder name
    $folder = "";
    if(isset($media->field_folder[LANGUAGE_NONE][0]['tid']) &&
      ($term = taxonomy_term_load($media->field_folder[LANGUAGE_NONE][0]['tid']))){
        $folder = $term->name;
    }
    $options[$media->fid] = array(
      'title' => theme('media_link', array('file' => $media)),
      'folder' => $folder,
      'type' =>  check_plain($media->filemime),
      'size' => format_size($media->filesize),
      'author' => theme('username', array('account' => $media)),
      'timestamp' => format_date($media->timestamp, 'short'),
    );
    $options[$media->fid]['operations'] = l(t('edit'), 'media/' . $media->fid . '/edit', array('query' => $destination));
  }
  // grab old options
  $ops = $form['options']['operation']['#options'];
  // redo the options form
  unset($form['options']);
  $form['options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Operations'),
    '#weight' => -10,
    'operations' => array(
      '#type' => 'container',
      '#prefix' => '<div class="container-inline">',
      '#suffix' => '</div>',
      'operation' => array(
        '#type' => 'select',
        '#options' => $ops,
        '#default_value' => 'delete',
      ),
      'submit' => array(
       '#type' => 'submit',
       '#value' => t('Submit'),
       '#submit' => array('media_admin_submit'),
       '#validate' => array('media_admin_validate')
      )
    ),
    'folder' => array(
      '#type' => 'container',
      'selected_folder' => array(
        '#type' => 'select',
        '#title' => t('Media Folder*'),
        '#required' => FALSE,
        '#options' => _media_browser_plus_folder_list()
      ),
      'submit' => array(
        '#type' => 'container',
        '#prefix' => '<div class="container-inline">',
        '#suffix' => '</div>',
        'submit' => array(
          '#type' => 'submit',
          '#value' => t('Change Folder'),
          '#submit' => array('media_browser_plus_media_admin_folder_change_submit'),
          '#validate' => array('media_admin_validate')
        ),
        'notice' => array(
          '#type' => 'item',
          '#markup' => t('*: change will be applied to ALL selected media files')
        )
      )
    )
  );
  $form['admin']['files']['#header'] = $header;
  $form['admin']['files']['#options'] = $options;
  // reset pager
  unset($form['admin']['pager']);
  $form['admin']['pager'] = array('#markup' => _media_browser_plus_pager($media_entities->page, $media_entities->pages));
  //
  return $form;
}

/**
 * function called by the JS Fronted via AJAX Request to change the folder of a media object
 */
function media_browser_plus_change_folder($form, &$form_state){
  // parse values
  $folder = (int) (str_replace("folder_load_", "", $form_state['input']['folder']));
  $media = media_load((int) (str_replace("edit-files-", "", $form_state['input']['media'])));
  // apply new folder
  if(isset($media->field_folder[LANGUAGE_NONE][0]['tid']))
    $media->field_folder[LANGUAGE_NONE][0]['tid'] = $folder;
  else
    $media->field_folder = array(LANGUAGE_NONE => array(array('tid' => $folder)));
  // save and exit
  media_save($media);
  die("");
  return $form;
}

/**
 * function called by the JS Fronted via AJAX Request to get the media list for a given folder
 */
function media_browser_plus_thumbnailsJSON(){
  if(isset($_POST['folder']) || isset($_GET['folder'])){
    $post = isset($_POST['folder']) ? $_POST['folder'] : $_GET['folder'];
    $folder = (int) (str_replace("folder_load_", "", $post));
    // create conditions
    $conditions = array();
    if($folder != 0){
      $conditions[] = array("field" => array("field_folder", "tid", array($folder), "IN"));
      $order = array(array("property" => array("timestamp", "DESC")));
      $media_entities = media_browser_plus_load_multiple(array("conditions" =>$conditions, "order" => $order));
    }
    else{
      // @TODO: Find a method for this, that works more efficiently
      // (i.e. not having to load the whole media object to get the id)
      // load first the ones which have been sorted
      $conditions[] = array("field" => array("field_folder", "tid", array($folder), "NOT IN"));
      $fakeHeader = array();
      $variables = array('conditions' => $conditions, 'paging' => false, 'ids_only' => true, 'apply_filter' => false);
      $ids = media_browser_plus_load_multiple($variables)->results;
      // now load all except those already sorted
      $conditions = array();
      // skip next condition in case everything is unsorted
      if(count($ids))
        $conditions[] = array("property" => array("fid", array($ids), "NOT IN"));
      $media_entities = media_browser_plus_load_multiple(array("conditions" =>$conditions, 'apply_filter' => false));
    }
    $return = '';
    foreach($media_entities->results as $media){
      $return .= '<li fid="' . $media->fid . '">';
      $return .= '<input class="form-checkbox hidden" id="edit-files-' . $media->fid . '" name="files[' . $media->fid . ']" value="1" type="checkbox">';
      $return .= drupal_render(media_get_thumbnail_preview(media_load($media->fid), TRUE));
      $return .= "</li>";
    }
    // append overall result count
    $return .= "<li id=\"result_count\">". count($media_entities->results) ."</li>";
    $return .= "<li id=\"overall_count\">". $media_entities->overall_count ."</li>";
    $return .= "<li id=\"folder_loaded\">folder_load_". $folder ."</li>";
    // replacing the false destination
    print str_replace("thumbnailsJSON", "thumbnails", $return);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function media_browser_plus_form_media_add_upload_multiple_alter(&$form, &$form_state) {
  // This builds the tags textfield and adds the autocomplete handlers to it.
  // The #element_validate may not be necessary because this never triggers
  // hook_field_update() or hook_field_insert()
  $form['field_tags'] = _media_browser_plus_tag_form();
  $form['field_folder'] = _media_browser_plus_folder_form();
  // Change the weight of the other form items so they appear in the right order
  $form['upload']['#weight'] = 0;
  $form['submit']['#weight'] = 2;
  // Add an additional form submission callback that fires after the default.
  $form['#submit'][] = 'media_browser_plus_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function media_browser_plus_form_media_internet_add_alter(&$form, &$form_state) {
  // Add an additional form submission callback that fires after the default.
  media_browser_plus_form_media_add_upload_alter($form, $form_state);
}

/**
 * Form element validate handler for taxonomy term autocomplete element.
 *
 * Because media_browser_plus_form_media_add_upload_multiple_alter() adds a
 * tags widget to a form that is not an entity editing form, but it is desired
 * for taxonomy_autocomplete_validate() to have access to the settings of the
 * field for which this widget is being added, this handler runs before
 * taxonomy_autocomplete_validate(), and adds the expected information to
 * $form_state, as expected by taxonomy_autocomplete_validate().
 */
function media_browser_plus_prepare_taxonomy_autocomplete_validate(&$element, &$form_state) {
  // causes: Notice: Undefined index: #language in media_browser_plus_prepare_taxonomy_autocomplete_validate() (line 436 of ...sites/all/modules/media_browser_plus-HEAD/media_browser_plus.module).
  // @TODO: fix
  $form_state['field'][$element['#field_name']][$element['#language']]['field'] = field_info_field($element['#field_name']);
  // fixes: undefined index #field_parents in field_widget_field()
  if(!isset($element['#field_parents'])) 
    $element['#field_parents'] = array();
}

/**
 * Form submit handler for the media browser forms that create new media entities.
 *
 * Enhances the media creation process by populating field content for the newly
 * created entities from user-submitted data and/or data available from a
 * remote provider.
 *
 * @see media_browser_plus_form_media_add_upload_multiple_alter()
 * @see media_browser_plus_form_media_internet_add_alter()
 */
function media_browser_plus_submit($form, &$form_state) {
  // Grab the fids of the newly created media entities from the redirect query
  // string that was created by the form's primary submit handler, and load the
  // corresponding entities.
  $fids = $form_state['redirect'][1]['query']['fid'];
  if (!is_array($fids)) {
    $fids = array($fids);
  }
  $media_entities = media_load_multiple($fids);

  // If tags have been entered, apply them to each new entity.
  if (!empty($form_state['values']['field_tags'])) {
    // Create any new taxonomy terms.
    foreach ($form_state['values']['field_tags'] as $i => &$item) {
      if ($item['tid'] == 'autocreate') {
        $term = (object) $item;
        unset($term->tid);
        taxonomy_term_save($term);
        $item['tid'] = $term->tid;
      }
      unset($item);
    }
    foreach ($media_entities as $media) {
      $media->field_tags[LANGUAGE_NONE] = $form_state['values']['field_tags'];
    }
  }
  // apply folder
  foreach ($media_entities as $media) {
      $media->field_folder[LANGUAGE_NONE] = $form_state['values']['field_folder'];
  }
  // If the new media is from a 3rd party provider, and that provider also
  // provides MRSS data about the media, then populate the title and description
  // fields from that data.
  if (!empty($form_state['values']['embed_code'])) {
    $provider = media_internet_get_provider($form_state['values']['embed_code']);
    if ($data = _media_browser_plus_metadata($provider)) {
      foreach ($data as $field_name => $value) {
        $field = field_info_field($field_name);
        // Limiting value population only if the field is of type 'text' or
        // 'text_long' isn't as extensible as would be ideal, but we need some
        // protection against populating a field with incompatible content.
        if (isset($field) && in_array($field['type'], array('text', 'text_long')) && isset($field['bundles']['media'])) {
          foreach ($media_entities as $media) {
            if (in_array($media->type, $field['bundles']['media']) && !isset($media->{$field_name}[LANGUAGE_NONE][0]['value'])) {
              $media->{$field_name}[LANGUAGE_NONE][0]['value'] = $value;
            }
          }
        }
      }
    }
  }
  foreach ($media_entities as $media) {
    media_save($media);
  }
}

/**
 * Helper function to return metadata that is available from a 3rd party media provider, such as YouTube.
 *
 * @param $provider
 *   A provider object as returned by media_internet_get_provider().
 *
 * @return
 *   An array of media metadata available from the provider, keyed on field
 *   name.
 *
 * @see http://video.search.yahoo.com/mrss
 * @see media_internet_get_provider()
 * @see MediaInternetYouTubeHandler::getMRSS()
 */
function _media_browser_plus_metadata($provider) {
  // @todo This is early, experimental code, still subject to much change. For
  //   now, we assume $provider->getMRSS() returns a SimpleXML element. We'll
  //   want to change this assumption and have it return an array instead, but
  //   that requires fixing media_retrieve_xml() to handle XML namespaces
  //   properly.
  $data = array();
  if (is_callable(array($provider, 'getMRSS')) && ($rss = $provider->getMRSS())) {
    // MRSS is an extension of RSS, so the title field is available in the
    // default (ATOM) namespace.
    $data['media_title'] = (string) $rss->title;
    // The MRSS extensions are in their own namespace.
    $mrss = $rss->children('http://search.yahoo.com/mrss/');
    $data['media_description'] = (string) $mrss->group->description;
  }
  $data = array_filter($data, 'strlen');
  return $data;
}

/**
 * Implements MODULE_preprocess_media_link().
 */
function media_browser_plus_preprocess_media_link(&$variables) {
  // Use the value of the title field, when there is one, as the link text for
  // all links that would otherwise default to the filename.
  // @todo Solve generically using the 'label' key of hook_entity_indo(). See
  //   http://drupal.org/node/910396.
  $media = media_load($variables['file']->fid);
  if (empty($variables['file']->description) && isset($media->media_title[LANGUAGE_NONE][0]['value'])) {
    $variables['file']->description = $media->media_title[LANGUAGE_NONE][0]['value'];
  }
}

/**
 * Implements MODULE_preprocess_media_thubmnail().
 */
function media_browser_plus_preprocess_media_thumbnail(&$variables) {
  // See media_browser_plus_preprocess_media_link(). Same thing here, but for
  // the links that appear underneath thumbnail previews.
  $media = $variables['element']['#object'];
  if (isset($media->media_title[LANGUAGE_NONE][0]['value'])) {
    $variables['element']['#name'] = $media->media_title[LANGUAGE_NONE][0]['value'];
  }
}

/**
 * Altering the add file upload form the include folder and tag options
 */
function media_browser_plus_form_media_add_upload_alter(&$form, &$form_state) {
  // alter weight to display new forms in correct order
  $form['file']['#weight'] = -5;
  $form['submit']['#weight'] = 5;
  $form['field_tags'] = _media_browser_plus_tag_form();
  $form['field_folder'] = _media_browser_plus_folder_form();
  $form['#submit'][] = 'media_browser_plus_submit';
}

/**
 * making sure the tagging form is below the folder form part
 */
function media_browser_plus_form_media_edit_alter(&$form, &$form_state) {
  // setting the weight accordingly
  $form['field_folder']['#weight'] = $form['field_tags']['#weight'] - 1;
  $form['actions']['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#weight' => 20,
    '#submit' => array('media_browser_plus_edit_cancel'));
}

function media_browser_plus_edit_cancel($form, &$form_state) {
  $destination = array();
  if (isset($_GET['destination'])) {
    $destination = drupal_get_destination();
    unset($_GET['destination']);
  }
  $form_state['redirect'] = $destination['destination'];
}
/**
 * Enter description here ...
 */
function _media_browser_plus_tag_form(){
  return array(
    '#weight' => 1,
    '#language' => LANGUAGE_NONE,
    '#field_name' => 'field_tags',
    '#columns' => array('tid'),
    '#title' => 'Tags',
    '#description' => 'Enter a comma-separated list of words to describe your image.',
    '#required' => FALSE,
    '#delta' => 0,
    '#type' => 'textfield',
    '#default_value' => '',
    '#autocomplete_path' => 'taxonomy/autocomplete/field_tags',
    '#element_validate' => array('media_browser_plus_prepare_taxonomy_autocomplete_validate', 'taxonomy_autocomplete_validate'),
    '#size' => 60,
  );
}

/**
 * Enter description here ...
 */
function _media_browser_plus_folder_form(){
  $list = _media_browser_plus_folder_list();
  // build form and return
  return array(
      '#type' => 'select',
      '#language' => LANGUAGE_NONE,
      '#title' => t('Media Folder'),
      '#field_name' => 'field_tags',
      '#weigth' => -2,
      '#options' => $list,
      '#description' => t('Select a folder this file should be put in')
  );
}
function media_browser_plus_delete_multiple_form($form, &$form_state, $fids) {
  // media_multiple_delete_confirm($form, &$form_state, $files
  $files = array();
  foreach(explode(" ", $fids) as $key => $value) {
    $files[$value] = $value;
  }
  module_load_include('inc', 'media', 'media.pages');
  $form = media_multiple_delete_confirm($form, $form_state, $files);
  return $form;
}

function media_browser_plus_edit_multiple_form($form, &$form_state, $fids) {
  // parsing file ids
  $fids = explode(" ", $fids);
  // grab media
  $variables = array('ids' => $fids, 'paging' => false, 'apply_filter' => false);
  $media_entities = media_browser_plus_load_multiple($variables);
  // prepare form
  $form['edit-list'] = array(
    '#type' => 'container',
    '#attributes' => array('id' => 'edit-list', 'style' => 'display: none')
  );
  $form['edit-select'] = array(
    '#type' => 'container',
    '#attributes' => array('id' => 'edit-select')
  );
  $form['edit-items'] = array(
    '#type' => 'container',
    '#attributes' => array('id' => 'edit-items')
  );
  // loop through media
  foreach($media_entities->results as $media) {
    $first = isset($first) ? $first : $media->fid;
    // add select item
    $form['edit-list']['edit-list[edit-item-' . $media->fid . ']'] = array(
      '#type' => 'hidden',
      '#value' => '0');
    $thumb = media_get_thumbnail_preview($media);
    $form['edit-select']['edit-' . $media->fid] = array(
      '#type' => 'markup',
      '#markup' => '<li><div id="media-select-' . $media->fid . '" class="media-select" style="display: inline;">' .
        $thumb[0]['#markup'] . 
        '</div></li>');
     $path = drupal_get_path('module', 'media');
     module_load_include('inc', 'media', 'media.pages');
     $form['edit-items']['edit-' . $media->fid] = array(
       '#type' => 'fieldset',
       '#attributes' => array(
         'id' => 'edit-item-' . $media->fid,
         'style' => 'display: none;'));
     $form['edit-items']['edit-' . $media->fid]['preview'] = field_view_field('media', $media, 'file', 'media_preview');
     $form['edit-items']['edit-' . $media->fid]['preview']['#weight'] = -10;
     field_attach_form('media', $media, $form['edit-items']['edit-' . $media->fid], $form_state);
     unset($form['edit-items']['edit-' . $media->fid]['file']);
  }
  $render = '';
  foreach($form['edit-select'] as $key => $value) {
    $render .= drupal_render($form['edit-select'][$key]);
  }
  $form['edit-select'] = array(
    '#type' => 'markup',
    '#markup' => '<div id="edit-select"><ul id="navlist">' . $render . '</ul></div>'
  );
  $path = drupal_get_path('module', 'media_browser_plus');
  $form['#attached']['css'][] = $path . '/css/jquery.jscrollpane.css';
  $form['#attached']['css'][] = $path . '/css/media_browser_plus.admin.css';
  $form['#attached']['js'][] = $path . '/js/jquery.mousewheel.js';
  $form['#attached']['js'][] = $path . '/js/mwheelIntent.js';
  $form['#attached']['js'][] = $path . '/js/jquery.jscrollpane.min.js';
  $form['#attached']['js'][] = $path . '/js/media_browser_plus.admin.edit_multiple.js';
  $setting['media_browser_plus']['current_edit_item'] = $first;
  $form['#attached']['js'][] = array(
    'type' => 'setting',
    'data' => $setting,
  );
  // append actions
  $form['actions'] = array(
    '#type' => 'actions',
      'delete' => array(
        '#type' => 'submit',
        '#value' => t('Save all changes'),
        '#weight' => 5,
        '#submit' => array('media_browser_plus_edit_multiple_submit'),
        '#limit_validation_errors' => array()),
      'submit' => array(
        '#type' => 'submit',
        '#value' => t('Discard all changes'),
        '#weight' => 15,
        '#submit' => array('media_browser_plus_edit_multiple_discard')),
        '#limit_validation_errors' => array());
  return $form;
}

/**
 *
 * Enter description here ...
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function media_browser_plus_edit_multiple_submit($form, &$form_state) {
  if(isset($form_state['input']['edit-list'])) {
    // grab field handlers
    $handlers = array();
    foreach (module_implements('media_browser_plus_save_field_preprocess_info') as $module) {
      foreach(module_invoke($module, 'media_browser_plus_save_field_preprocess_info') as $key => $name) {
        $handlers[$name][] = array('#module' => $module);
      }
    }
    foreach($form_state['input']['edit-list'] as $key => $value) {
      // construct id and load media item
      $id = str_replace('edit-item-', '', $key);
      $media = media_load($id);
      foreach($form_state['input'][$key] as $field => $field_data) {
        if(isset($handlers[$field])) {
          foreach($handlers[$field] as $pkey => $pvalue) {
            module_invoke($pvalue['#module'], 'media_browser_plus_save_field_preprocess', $field, $field_data, $media);
          }
        }
      }
      media_save($media);
    }
  }
}

function media_browser_plus_edit_multiple_discard($form, &$form_state) {
  // let the form go back on its own
}

/**
 * implement hook menu
 */
function media_browser_plus_menu(){
  $items['admin/content/media/change_folder'] = array(
    'title' => 'Change Folder',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_browser_plus_change_folder'),
    'file' => 'media_browser_plus.module',
    'access callback' => 'media_access',
    'access arguments' => array('edit')
  );
  $items['admin/content/media/filter'] = array(
    'title' => 'Media Filter',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_browser_plus_media_filter'),
    'file' => 'media_browser_plus.module',
    'access callback' => 'media_access',
    'access arguments' => array('filter'),
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_INLINE
  );
  $items['admin/content/media/thumbnailsJSON'] = array(
    'title' => 'Load Media Entities',
    'page callback' => 'media_browser_plus_thumbnailsJSON',
    'file' => 'media_browser_plus.module',
    'access callback' => 'media_access',
    'access arguments' => array('preview')
  );
  $items['admin/config/media/media_browser_plus_settings'] = array(
    'title' => 'Media Browser Plus Settings',
    'description' => 'Change the behaviour and layout of the media browser plus UI',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_browser_plus_media_settings'),
    'file' => 'media_browser_plus.module',
    'access callback' => 'media_access',
    'access arguments' => array('administer')
  );
  $items['admin/content/media/edit_multiple/%'] = array(
    'title' => 'Edit Media Items',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_browser_plus_edit_multiple_form', 4),
    'file' => 'media_browser_plus.module',
    'access callback' => 'media_access',
    'access arguments' => array('edit')
  );
  $items['admin/content/media/delete_multiple/%'] = array(
    'title' => 'Delete Media Items',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_browser_plus_delete_multiple_form', 4),
    'file' => 'media_browser_plus.module',
    'access callback' => 'media_access',
    'access arguments' => array('edit')
  );
  // folder management disabled until menu bug has been fixed
  $items['admin/content/media/folder_list'] = array(
    'title' => 'Administer folders',
    'description' => 'Manage your media folders',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_browser_plus_folder_list'),
    'file' => 'media_browser_plus.folders.inc',
    'access callback' => 'media_browser_plus_access',
    'access arguments' => array('administer media folders')
  );
  $items['admin/content/media/add_folder'] = array(
    'title' => 'Add Folder',
    'description' => 'Add a new media folder',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_browser_plus_folder_add'),
    'access callback' => 'media_browser_plus_access',
    'access arguments' => array('administer media folders'),
    'file' => 'media_browser_plus.folders.inc',
  );
  $items['admin/content/media/folder/%media_browser_plus_folder/edit'] = array(
    'title' => 'Edit Folder',
    'description' => 'Edit media folder',
    'page callback' => 'drupal_get_form',
    'page arguments'  => array('media_browser_plus_folder_edit', 4),
    'access callback' => 'media_browser_plus_access',
    'access arguments' => array('administer media folders'),
    'file' => 'media_browser_plus.folders.inc'
  );
  $items['admin/content/media/folder/%media_browser_plus_folder/delete'] = array(
    'title' => 'Delete Folder',
    'description' => 'Delete media folder',
    'page callback' => 'drupal_get_form',
    'page arguments'  => array('media_browser_plus_folder_delete', 4),
    'access callback' => 'media_browser_plus_access',
    'access arguments' => array('administer media folders'),
    'file' => 'media_browser_plus.folders.inc'
  );
  $items['admin/content/media/%media/preview'] = array(
    'title' => 'Preview Media',
    'description' => 'Preview Media Item',
    'page callback' => 'drupal_get_form',
    'page arguments'  => array('media_browser_plus_media_preview', 3),
    'access callback' => 'media_access',
    'access arguments' => array('preview'),
    'file' => 'media_browser_plus.module'
  );
  return $items;
}

function media_browser_plus_menu_alter(&$items) {
  $items['admin/content/media']['access arguments'] = array('access media backend');
  $items['admin/content/media']['access callback'] = array('media_browser_plus_access');
}

function media_browser_plus_permission() {
  return array(
    'media grid view' => array(
      'title' => t('Grid View'),
      'description' => t('Allow users to use the grid view.'),
    ),
    'media list view' => array(
      'title' => t('List View'),
      'description' => t('Allow users to use the list view.'),
    ),
    'access media backend' => array(
      'title' => t('Access media backend'),
      'description' => t('Allow user to access the media backend according to their privileges.'),
    ),
    'upload media' => array(
      'title' => t('Upload media'),
      'description' => t('Allow user to add media.'),
    ),
    'download media' => array(
      'title' => t('Download Media'),
      'description' => t('Allows the user to download the original media items.'),
    ),
    'filter media' => array(
      'title' => t('Filter Media'),
      'description' => t('Allows the user to filter the displayed media in the backend.'),
    ),
    'administer media folders' => array(
      'title' => t('Administer Media Folders'),
      'description' => t('Allows the user to add, edite, delete and resort media folders.'), // @TODO better description
    ),
    'preview media' => array(
      'title' => t('Preview media'),
      'description' => t('Allows the user to view a configurable preview of the original media item.'), // @TODO better description
    ),
  );
}

/**
 * Enter description here ...
 * @param $field
 * @param $entity_type
 * @param $entity
 */
function media_browser_plus_file_download_access($field, $entity_type, $entity) {
  if($entity_type == 'media') {
    foreach (module_implements('media_entity_access') as $module) {
      $bool = module_invoke($module, 'media_entity_access', $entity);
      if($bool === FALSE) {
        return FALSE;
      }
    }
    // return true if no module returned false
    return TRUE;
  }
}

/**
 * revokes the general "view media" == "download media" access rule
 * @param $grants
 * @param $field
 * @param $entity_type
 * @param $entity
 */
function media_browser_plus_file_download_access_alter(&$grants, $field, $entity_type, $entity = null) {
  if($entity_type == 'media'){
    unset($grants['media']);
  }
}

function media_browser_plus_media_preview($form, &$form_state, $media) {
  if($media->type == 'image') {
    $maxWidth = (int)$_POST['maxWidth'];
    $maxHeight = (int)$_POST['maxHeight'];
    //echo drupal_render($form['preview']);
    list($sx, $sy) = getimagesize(drupal_realpath($media->uri));
    if($sx > $maxWidth){
      $ratio = bcdiv($maxWidth, $sx, 5);
      $sx = $maxWidth;
      $sy = bcmul($sy, $ratio, 0);
    }
    if($sy > $maxHeight){
      $ratio = bcdiv($maxHeight, $sy, 5);
      $sy = $maxHeight;
      $sx = bcmul($sx, $ratio, 0);
    }
    $base_url = "http://" . $_SERVER['HTTP_HOST'] . base_path();
    $uri = "";
    if(strstr($media->uri, "private://")) {
      $stream = new DrupalPrivateStreamWrapper();
    } else {
      $stream = new DrupalPublicStreamWrapper();
    }
    $stream->setUri($media->uri);
    $uri = $stream->getExternalUrl($media->uri);
    // output
    echo '<div class="preview-metadata" title="'.$media->filename.'">' .
      '<img width="'.$sx.'" height="'.$sy.'" src="'.$uri.'" /></div>';
  } else {
    $form['preview'] = media_get_thumbnail_preview(media_load($media->fid), TRUE);
    echo drupal_render($form['preview']);
  }
  die();
}

function media_browser_plus_media_preview_submit($form, &$form_state) {
  $form_state['redirect'] = 'admin/content/media/thumbnails';
}

function media_browser_plus_media_operations() {
  return array(
    'edit_multiple' => array(
      'label' => t('Edit'),
      'callback' => NULL,
      'redirect' => 'admin/content/media/edit_multiple/%fids'
    ));
}

function media_browser_plus_access($op) {
  return (user_access('administer media') || user_access($op));
}

function media_browser_plus_media_browser_plus_save_field_preprocess_info() {
  return array('field_folder', 'field_tags', 'field_description');
}

/**
 *
 * Enter description here ...
 * @param string $name
 * @param string $value
 * @param object $media
 */
function media_browser_plus_media_browser_plus_save_field_preprocess($name, $value, $media) {
  switch($name) {
    case('field_folder'):
      if(is_array($media->field_folder[LANGUAGE_NONE]))
        $media->field_folder[LANGUAGE_NONE] = array(array('tid' => $value[LANGUAGE_NONE]));
      else
        $media->field_folder = array(LANGUAGE_NONE => array(array('tid' =>$value)));
    break;
    case('field_tags'):
      $media->field_tags = array(LANGUAGE_NONE => media_browser_plus_load_tag_terms($value[LANGUAGE_NONE], true, true));
    break;
    case('field_description'):
      $media->field_description = array(LANGUAGE_NONE => 
        array(
          array(
            'value' =>$value[LANGUAGE_NONE],
            'format' => '',
            'safe_value' => check_plain($value[LANGUAGE_NONE]))));
    break;
  }
}

/**
 * implementation of hook_load
 * used to load media folders
 */
function media_browser_plus_folder_load($id){
  return taxonomy_term_load($id);
}

/**
 * creates the folder media tree
 */
function _media_browser_plus_folder_hierarchy_list($list){
  if(!isset($list['parents']) || !isset($list['children']))
    return;
  //
  if(count($list['parents']) == 0){
    return t('No folders created yet');
  }
  else{
    if(_media_browser_plus_has_unsorted_media()){
      $all_folders = array();
      $all_folders[0] = new stdClass();
      $all_folders[0]->name = t('Unsorted');
      $all_folders[0]->tid = 0;
      //
      $list['parents'] = array_merge($all_folders, $list['parents']);
    }
    return _media_browser_plus_folder_hierarchy_list_helper($list['parents'], $list['children']);
  }
  //	
}

/**
 * @param $parents
 * @param $children
 * @param $hide
 */
function _media_browser_plus_folder_hierarchy_list_helper($parents, &$children, $hide = false){
  //
  $path = "http://" . $_SERVER['HTTP_HOST'] . base_path() . drupal_get_path('module', 'media_browser_plus');
  //
  $buffer  = "<ul ";
  $buffer .=" class=\"";
  $buffer .= $hide ? "hidden" : "";
  $buffer .= "\">\n";
  //
  foreach($parents as $item){
    $has_children = isset($children[$item->tid]);
    $has_media= _media_browser_plus_folder_empty($item->tid) || $item->tid == 0;
    //
    $buffer .= "<li class=\"media_folder";
    if($has_children){
      $buffer .= " parent\">";
      $buffer .= "<div class=\"folder";
      $buffer .= $has_media ? "" : " emptyParent";
      $buffer .= " folder-children-toggle\">" .
         "<img src=\"".$path."/images/pixel.gif\" border=\"0\" alt=\"\">" .
         "</div> ";
      $buffer .= "<div id=\"folder_load_".$item->tid."\" class=\"folder_load";
      $buffer .= $has_media ? "" : " emptyFolder";
      $buffer .= "\">" . $item->name . "</div>\n";
      $buffer .= _media_browser_plus_folder_hierarchy_list_helper($children[$item->tid], $children, false);
      $buffer .= "</li>\n";
    }
    else {
      $buffer .= "\">";
      $buffer .= "<div class=\"folder";
      $buffer .= $has_media ? "" : " empty";
      $buffer .= " \">" .
        "<img src=\"".$path."/images/pixel.gif\" border=\"0\" alt=\"\">" .
        "</div> ";
      $buffer .= "<div id=\"folder_load_".$item->tid."\" class=\"folder_load";
      $buffer .= $has_media ? "" : " emptyFolder";
      $buffer .= "\">" . $item->name . "</div></li>\n";
    }
  }
  $buffer .= "</ul>\n";
  return $buffer;
}

/**
 * helper function
 */
function _media_browser_plus_create_relationship_list($categories){
  $return = array();
  $parents = array();
  $children = array();
  //
  foreach($categories as $key=>$value){
    // root node
    if($value->parents[0] == 0){
      // create parent entry
      $parents[$value->tid] = $value;
      continue;
    }
    else {
      // create child entry
      $children[$value->parents[0]][$value->tid] = $value;
      continue;
    }
  }
  // if no root parents
  if(!count($parents) && count($children)){
    foreach($children as $pid=>$parents_children){
      if(!isset($parents[$pid])){
        // move child into parent array keeping indexes
        foreach($children[$pid] as $id=>$item){
          $parents[$id] = $item;
        }
        unset($children[$pid]);
      }
    }
  }
  $return['parents'] = $parents;
  $return['children'] = $children;
  //
  return $return;
}

/**
 * checks for unsorted (i.e. media not in folders) media
 */
function _media_browser_plus_has_unsorted_media(){
  // loading media
  $entity_controller = entity_get_controller('media');
  $media_entities = $entity_controller->load(NULL, array(), 0, 100);
  //
  foreach($media_entities as $media){
  if(!isset($media->field_folder[LANGUAGE_NONE][0]['tid']))
    return true;
  }
  // none found
  return false;
}

/**
 * Enter description
 */
function media_browser_plus_media_filter(){
  $form = array();
  $path = drupal_get_path('module', 'media_browser_plus');
  $form['#attached']['js'][] = $path . '/js/media_browser_plus.filter.js';
  $form['#attached']['css'][] = $path . '/css/media_browser_plus.filter.css';
  // getting the media folders for filter selection
  $folders = _media_browser_plus_folder_list();
  // setting default filter selections - will be overwritten when a filter is active
  $selected_types = array_keys(media_type_get_types());
  $selected_folders = array_keys($folders);
  // apply filter settings
  if(isset($_SESSION['media-filter'])){
    if(count($_SESSION['media-filter']['type'])){
      $selected_types = explode("," ,$_SESSION['media-filter']['type']);
    }
    if(count($_SESSION['media-filter']['field_folder'])){
      $selected_folders = $_SESSION['media-filter']['field_folder'];
    }
  }
  // check for tags
  $field_tags = "";
  if(isset($_SESSION['media-filter']['field_tags']) && count($_SESSION['media-filter']['field_tags'])){
    // use name buffer array...
    $names = array();
    foreach($_SESSION['media-filter']['field_tags'] as $tid){
      $term = taxonomy_term_load($tid);
      $names[] = $term->name;
    }
    // .. to be able to nicely implode with clean comma seperation
    $field_tags = implode(", ", $names);
  }
  // get media types
  $types = media_type_get_types();
  $media_types = array();
  // user labels as display and value for backend
  foreach($types as $value=>$type) {
    $access = true;
    foreach (module_implements('media_type_access') as $module) {
      $access = module_invoke($module, 'media_type_access', $type);
      if($access === FALSE) {
        break;
      } else {
        $access = true;
      }
    }
    if($access)
      $media_types[$value] = $type->label;
  }
  $form['filter'] = array(
    '#type' => 'fieldset',
    '#title' => isset($_SESSION['media-filter']) ? t('Show only items where') : t('Create Filter'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#weight' => -10,
    '#prefix' => '<div id="media-preview-wrapper">',
    '#suffix' => '</div>',
    '#attributes' => array('id' => 'media-filter'),
    'column_one' => array(
      '#type' => 'container',
      '#prefix' => '<div style="float:left; padding-right: 20px;">',
      '#suffix' => '</div>',
      '#attributes' => array(),
      'filename' => array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#maxlength' => 125,
        '#size' => 40,
        '#value' => (isset($_SESSION['media-filter']['filename']) ? $_SESSION['media-filter']['filename'] : ""),
        '#required' => FALSE),
      'field_tags' => array(
        '#attributes' => array('id' => 'media-field-tags-filter'),
        '#type' => 'textfield',
        '#value' => $field_tags,
        '#field_name' => 'field_tags',
        '#columns' => array('tid'),
        '#title' => 'Tags',
        '#size' => 40,
        '#description' => 'Enter a comma-separated list of words to filter your media.',
        '#required' => FALSE,
        '#delta' => 0,
        '#language' => LANGUAGE_NONE,
        '#type' => 'textfield',
        '#autocomplete_path' => 'taxonomy/autocomplete/field_tags',
        '#element_validate' => array('media_browser_plus_prepare_taxonomy_autocomplete_validate', 'taxonomy_autocomplete_validate'))),
    'column_two' => array(
      '#type' => 'container',
      '#prefix' => '<div style="float:left; padding-right: 20px;">',
      '#suffix' => '</div>',
      '#attributes' => array(),
      'criterias' => array(
        '#type' => 'container',
        '#attributes' => array(),
        'media_type' => array(
          '#type' => 'select',
          '#title' => t('Media Type'),
          '#multiple' => TRUE,
          '#options' => $media_types,
          '#default_value' => $selected_types,
          '#weight' => 5,
          '#required' => FALSE,
          '#attributes' => array('class' => array('media-filter-select')),
          '#prefix' => '<div style="float:left; padding-right: 20px;">',
          '#suffix' => '</div>'),
        'field_folder' => array(
          '#type' => 'select',
          '#title' => t('Media Folder'),
          '#multiple' => TRUE,
          '#required' => FALSE,
          '#options' => $folders,
          '#default_value' => $selected_folders,
          '#weight' => 6,
          '#attributes' => array('class' => array('media-filter-select')),
          '#prefix' => '<div style="float:left; padding-right: 20px;">',
          '#suffix' => '</div>'),
        'include_subfolders' => array(
          '#type' => 'checkbox',
          '#weight' => 10,
          '#attributes' => array('class' => array('media-filter')),
          '#title' => t('include subfolders of selected folders'),
          '#default_value' => (isset($_SESSION['media-filter']['include_subfolders']) ? 
                     $_SESSION['media-filter']['include_subfolders'] : 0))
    )),
    'column_three' => array(
      '#type' => 'container',
      '#prefix' => '<div style="float:left; padding-right: 20px;">',
      '#suffix' => '</div>',
      '#attributes' => array(),
      'submit' => array(
        '#type' => 'submit',
        '#value' => isset($_SESSION['media-filter']) ? t('Update Filter') : t('Create Filter'),
        '#submit' => array('media_browser_plus_media_filter_submit'),
        '#limit_validation_errors' => array(),
        '#validate' => array('media_browser_plus_media_filter_validate'),
        '#prefix' => '<div>',
        '#suffix' => '</div>')
    )
  );
  if(isset($_SESSION['media-filter'])){
    $form['filter']['column_three']['clear'] = array(
        '#type' => 'submit',
        '#value' => t('Reset Filter'),
        '#submit' => array('media_browser_plus_media_filter_clear'),
        '#limit_validation_errors' => array(),
        '#validate' => array('media_browser_plus_media_filter_clear_validate'),
        '#prefix' => '<div>',
        '#suffix' => '</div>'
    );
  }
  return $form;
}

/**
 * Enter description
 */
function _media_browser_plus_folder_list($prefixPadding = "-"){
  //
  $vocabulary = taxonomy_vocabulary_machine_name_load('media_folders');
  $folders = taxonomy_get_tree($vocabulary->vid);
  $folders = _media_browser_plus_filter_folder_access($folders);
  // start with empty list
  $list = array();
  // and fill it with padded folders
  foreach($folders as $folder){
    $pad = (($folder->depth * strlen($prefixPadding)) + strlen($folder->name));
    $list[$folder->tid] = str_pad($folder->name, $pad, $prefixPadding, STR_PAD_LEFT); 
  }
  return $list;
}

/**
 * changes the folder of the submitted media items
 */
function media_browser_plus_media_admin_folder_change_submit(&$form, &$form_state){
  // get IDs
  $fids = array_keys(array_filter($form_state['values']['files']));
  $folder = (int) $form_state['values']['selected_folder'];
  // load media
  $media_entities = media_load_multiple($fids);
  // apply folder
  foreach ($media_entities as $media) {
    if(isset($media->field_folder[LANGUAGE_NONE][0]['tid']))
      $media->field_folder[LANGUAGE_NONE][0]['tid'] = $folder;
    else
      $media->field_folder = array(LANGUAGE_NONE => array(array('tid' => $folder)));
    // save changes
    media_save($media);
  }
  //
  drupal_set_message(t('Folder changes applied successfully'));
}


/**
 * Called when the filter form is submitted.
 * Adds filter to session and redirects back to callee
 * @param $argument
 */
function media_browser_plus_media_filter_submit($form, &$form_state) {
  // process filter
  $_SESSION['media-filter']['filename'] = check_plain($form_state['input']['filename']);
  $_SESSION['media-filter']['type'] = count($form_state['input']['media_type']) > 0 ?
    implode(",", $form_state['input']['media_type']) :
    implode(",", array_keys(media_type_get_types()));
  $_SESSION['media-filter']['include_subfolders'] = $form_state['input']['include_subfolders'];
  //
  $tags = check_plain($form_state['input']['field_tags']);
  $tags = explode(",", $tags);
  $vocabulary = taxonomy_vocabulary_machine_name_load('tags');
  // process tags filter entry
  $_SESSION['media-filter']['field_tags'] = array();
  foreach($tags as $tag){
    // check if tag exists
    $result = db_query('SELECT tid FROM {taxonomy_term_data} ttd WHERE ttd.name = :name AND ttd.vid = :vocabulary',
      array('name' => trim($tag), 'vocabulary' => $vocabulary->vid));
    foreach($result as $item){
      $_SESSION['media-filter']['field_tags'][] = $item->tid;
    }
  }
  $temp = array();
  $vocabulary = taxonomy_vocabulary_machine_name_load('media_folders');
  // check field_folder
  if(count($form_state['input']['field_folder']) == 0){
    $all = taxonomy_get_tree($vocabulary->vid);
    //
    foreach($all as $key=>$term){
      $temp[$term->tid] = $term->tid;
    }
  }
  else {
    foreach($form_state['input']['field_folder'] as $key=>$value){
      $tid = $value;
      $temp[$tid] = $tid;
      //
      if($form_state['input']['include_subfolders']){
        $children = taxonomy_get_tree($vocabulary->vid, $tid);
        //
        foreach($children as $key=>$term){
          $temp[$term->tid] = $term->tid;
        }
      }
    }
  }
  $_SESSION['media-filter']['field_folder'] = array_keys($temp);
  //
  // go back to media overview
  //$form_state['redirect'] = array('admin/content/media');
}

/**
 *
 * Validates the filter form
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function media_browser_plus_media_filter_validate($form, &$form_state) {
  // @todo: implement filter minimum check
}

/**
 *
 * Called when the filter form is submitted.
 * Adds filter to session and redirects back to callee
 *
 * @param $argument
 */
function media_browser_plus_media_filter_clear($form, &$form_state) {
  // remove filter
  unset($_SESSION['media-filter']);
  // go back to media overview
  //$form_state['redirect'] = array('admin/content/media');
}

/**
 *
 * Clears the filter form
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function media_browser_plus_media_filter_clear_validate($form, &$form_state) {
  // @todo: implement filter minimum check
}

/**
 * loads media entities and allows filtering, sorting and paging
 *
 * @param $variables holds an array with the following optional parameters
 * $ids
 *   one dimensional array of entity_ids
 * $conditions
 *   multidemsional array build like this:
 *   array(array("entity" => array("comlumn", "value", "condition")),
 *         array("property" => array("comlumn", "value", "condition")),
 *         array("field" => array("field_name", "comlumn", "value", "condition")))
 * $order
 *   multidemsional array build like this:
 *   array(array("entity" => array("comlumn", "direction")),
 *         array("property" => array("comlumn", "direction")),
 *         array("field" => array("comlumn", "direction")))
 * $header 
 *   table header used for sorting
 * $per_page
 *   items per page
 * @param array $paging
 *   enables/disables paging - default is paging on
 */
function media_browser_plus_load_multiple($variables){
  // set up default parameter
  $params = array(
    "ids" => array(),
    "conditions" => array(),
    "order" => array(),
    "header" => array(),
    "per_page" => variable_get('media_media_per_page'),
    "paging" => true,
    "ids_only" => false,
    "apply_filter" => true);
  // override defaults
  foreach($variables as $key=>$value){
    if(isset($params[$key])){
      $params[$key] = &$variables[$key];
    }
  }
  if($params['apply_filter'] && isset($_SESSION['media-filter'])){
    if(strlen($_SESSION['media-filter']['filename'])){
      $params['conditions'][] = array("property" => array("filename", "%".$_SESSION['media-filter']['filename']."%", "LIKE"));
    }
    if(count($_SESSION['media-filter']['type'])){
      $params['conditions'][] = array("property" => array("type", explode(",", $_SESSION['media-filter']['type']), "IN"));
    }
    if(count($_SESSION['media-filter']['field_folder'])){
      $params['conditions'][] = array("field" => array("field_folder", "tid", $_SESSION['media-filter']['field_folder'], "IN"));
    }
    if(count($_SESSION['media-filter']['field_tags'])){
      foreach($_SESSION['media-filter']['field_tags'] as $tag_id){
        $params['conditions'][] = array("field" => array("field_tags", "tid", $tag_id, "="));
      }
    }
  }
  // allow other modules to add/alter conditions
  foreach (module_implements('media_access_conditions') as $module) {
    $params['conditions'] = array_merge(module_invoke($module, 'media_access_conditions'), $params['conditions']);
  }
  $query = new EntityFieldQuery();
  // set entity type to media
  $query->entityCondition('entity_type', 'media');
  // parse ids if any have been passed
  if(count($params['ids'])){
    $query->entityCondition('entity_id', $params['ids'], 'IN');
  }
  // check for table header
  if(count($params['header'])){
    $query->tableSort($params['header']);
  }
  // parse conditions
  foreach($params['conditions'] as $condition){
    // look what type we have
    switch(array_pop(array_keys($condition))){
      case('entity'):
        $query->entityCondition($condition['entity'][0],
          $condition['entity'][1],
          $condition['entity'][2]);
      break;
      case('property'):
        $query->propertyCondition($condition['property'][0],
          $condition['property'][1],
          $condition['property'][2]);
      break;
      case('field'):
        $query->fieldCondition($condition['field'][0],
          $condition['field'][1],
          $condition['field'][2],
          $condition['field'][3]);
      break;
    }
  }
  // parse order array
  foreach($params['order'] as $condition){
    // look what type we have
    switch(array_pop(array_keys($condition))){
      case('entity'):
        $query->entityOrderBy($condition['entity'][0], 
          $condition['entity'][1]);
      break;
      case('property'):
        $query->propertyOrderBy($condition['property'][0],
          $condition['property'][1]);
      break;
      case('field'):
        $query->fieldOrderBy($condition['field'][0],
          $condition['field'][1],
          $condition['field'][2]);
      break;
    }
  }
  // prepare result object
  $res_object = new StdClass();
  if($params['paging']){
    // doing a seperate count query here, because including the internal pager
    // doesn't work but seems the only way to get a total result count
    $count = clone $query;
    $count->pager();
    $count->execute();
    $res_object->overall_count = $count->pager['total'];
    // using range here, because as said above the internal pager seems to be bugged
    $page = isset($_GET['page']) ? $_GET['page'] : (isset($_POST['page']) ? $_POST['page'] : 0);
    $query->range($page * $params['per_page'], $params['per_page']);
    // adding the addition result fields
    $res_object->page = $page;
    $res_object->pages = ceil($res_object->overall_count / variable_get('media_media_per_page'));;
    $res_object->per_page = $params['per_page'];
  }
  $res_object->results = array();
  // execute query and load results
  $result = $query->execute();
  if (!empty($result['media'])) {
    $res_object->results = $params['ids_only'] ? array_keys($result['media']) :
      entity_load('media', array_keys($result['media']));
  }
  // and return the object
  return $res_object;
}

/**
 * looks if a filter is active and filters the folders accordingly
 *
 * @param array $folders
 */
function _media_browser_plus_filter_folders($folders) {
  // no filter active, return unchanged $folders array
  $filtered_folders = $folders;
  if(isset($_SESSION['media-filter'])) {
    $folder_filtered = array();
    // look through the tree and add elements that match filter
    foreach($folders as $item){
      if(in_array($item->tid, $_SESSION['media-filter']['field_folder'])){
        $folder_filtered[] = $item;
      }
    }
    $filtered_folders = $folder_filtered;
  }
  $filtered_folders = _media_browser_plus_filter_folder_access($filtered_folders);
  return $filtered_folders;
}

/**
 * Enter description here ...
 * @param $folders
 */
function _media_browser_plus_filter_folder_access($folders) {
  $temp_folders = $folders;
  $filtered_folders = array();
  foreach($temp_folders as $item) {
    $access = true;
    foreach (module_implements('media_folder_access') as $module) {
      $access = module_invoke($module, 'media_folder_access', $item);
      if($access === FALSE) {
        break;
      } else {
        $access = true;
      }
    }
    if($access)
      $filtered_folders[] = $item;
  }
  return $filtered_folders;
}
/**
 * Enter description here ...
 */
function _media_browser_plus_pager($page, $pages){
  // get url for paging link
  $destination = drupal_get_destination();
  $link = "http://" . $_SERVER['HTTP_HOST'] . base_path() . '?q=admin/content/media/list';
  $sort = isset($_GET['sort']) ? "&sort=" . check_plain($_GET['sort']) : "";
  $order = isset($_GET['order']) ? "&order=" . check_plain($_GET['order']) : "";
  $url = $link . $sort . $order;
  // create paging div inside buffer
  $output = '<div id="media_paging_table" align="center">';
  // calculate paging
  $start = max(0, $page - ceil(variable_get('media_page_items_per_page') / 2));
  $end = min($pages, $start + variable_get('media_page_items_per_page'));
  if($start > 0){
    $output .= _media_browser_plus_pager_add_page_item($url, $start-1, $page, "...");
  }
  // create numbers
  for($i = $start; $i < $end; $i++){
    $output .= _media_browser_plus_pager_add_page_item($url, $i, $page, $i+1);
  }
  //
  if($pages > $i){
    $output .= _media_browser_plus_pager_add_page_item($url, $i, $page, "...");
  }
  return $output . '</div>';
}

/**
 * Enter description
 *
 * @param $url
 * @param $page
 * @param $title
 */
function _media_browser_plus_pager_add_page_item($url, $page, $current_page, $title){
  $page_item = '<a class="media_paging_page';
  //
  if(($page == $current_page))
    $page_item .= ' active_page';
  $page_item .= '" href="' . $url .
  '&page=' . $page.'">' . $title . '</a>';
  return $page_item;
}

function media_browser_plus_media_settings($form, &$form_state = array()) {
  $form = array(
    'media_per_page' => array(
      '#type' => 'textfield',
      '#title' => 'Media Items per page',
      '#description' => t('Insert a number higher than one for the amount of media items displayed per page'),
      '#default_value' => variable_get('media_media_per_page'),
      '#maxlength' => 4,
      '#required' => TRUE),
    'grid_window_height' => array(
      '#type' => 'textfield',
      '#title' => 'Grind Window Height',
      '#default_value' => variable_get('media_grid_window_height'),
      '#description' => t('Set a maximum height of pixels for the media grid view'),
      '#maxlength' => 4,
      '#required' => TRUE),
    'page_items_per_page' => array(
      '#type' => 'textfield',
      '#title' => 'Page Items per page',
      '#default_value' => variable_get('media_page_items_per_page'),
      '#description' => t('Set how many page items you want in the paging navigation of each page'),
      '#maxlength' => 4,
      '#required' => TRUE)
  );
  
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Save Changes'));
  return $form;
  
}

function media_browser_plus_media_settings_submit($form, &$form_state) {
  // change settings
  variable_set('media_media_per_page', (int)$form_state['values']['media_per_page']);
  variable_set('media_grid_window_height', (int)$form_state['values']['grid_window_height']);
  variable_set('media_page_items_per_page', (int)$form_state['values']['page_items_per_page']);
  // notify user
  drupal_set_message(t('Media Browser Plus Settings changed successfully'));
  // go back to media overview
  $form_state['redirect'] = array('admin/config');
}

function media_browser_plus_media_settings_validate($form, &$form_state) {
  // validate settings
  $value = (int)$form_state['values']['media_per_page'];
  if($value <= 0)
    form_set_error('Media Settings', t('Incorrect value for "Media Items per page"'));
  $value = (int)$form_state['values']['grid_window_height'];
  if($value <= 100)
    form_set_error('Media Settings', t('Incorrect value for "Grind Window Height"'));
  $value = (int)$form_state['values']['page_items_per_page'];
  if($value <= 2)
    form_set_error('Media Settings', t('Incorrect value for "Page Items per page"'));
}

/**
 * Check if a given folder has media in it (does include current filter)
 *
 * @param int $folder_id
 */
function _media_browser_plus_folder_empty($folder_id){
  // save paging values
  $gp = isset($_GET['page']) ? $_GET['page'] : null;
  $pp = isset($_POST['page']) ? $_POST['page'] : null;
  // set media condition
  $condition = array(array("field" => array("field_folder", "tid", array($folder_id), "IN")));
  $variables = array(
    "conditions" => $condition,
    "per_page" => 1, 
    "ids_only" => true);
  $media = media_browser_plus_load_multiple($variables);
  // restore paging values if necessary
  if($gp)
    $_GET['page'] = $gp;
  if($pp)
    $_POST['page'] = $pp;
  // check if media has been found in the folder
  return ($media->overall_count > 0);
}

function media_browser_plus_load_tag_terms($tags, $tids_only = true, $auto_create = false) {
  $vocabulary = taxonomy_vocabulary_machine_name_load('tags');
  $select = $tids_only ? 'tid, name' : '*';
  $all_tags = array();
  $found_tags = array();
  $found_terms = array();
  $terms = explode(',', $tags);
  foreach($terms as $tag) {
    // check if tag exists
    $results = db_query('SELECT '.$select.' FROM {taxonomy_term_data} ttd WHERE ttd.name = :name AND ttd.vid = :vocabulary',
      array('name' => check_plain(trim($tag)), 'vocabulary' => $vocabulary->vid));
    foreach($results as $result) {
      $term = taxonomy_term_load($result->tid);
      if($tids_only)
        $found_terms[] = array('tid' => $term->tid);
      else
        $found_terms[] = get_object_vars($term);
      $found_tags[] = trim($tag);
    }
    $all_tags[] = trim($tag);
  }
  if($auto_create) {
    foreach(array_diff($all_tags, $found_tags) as $id => $tag) {
      $term = new stdClass();
      $term->name = $tag;
      $term->vid = $vocabulary->vid;
      if(strlen(trim($term->name))) {
        taxonomy_term_save($term);
        if($tids_only)
          $found_terms[] = array('tid' => $term->tid);
        else
          $found_terms[] = get_object_vars($term);
      }
    }
  }
  return $found_terms;
}
