<?php
// $Id$ 

/**
 * @file
 * Adds fields to the media browser forms for better UX
 */


/**
 * Alter the media browser from to enable new UI
 */
function media_browser_plus_form_media_admin_alter(&$form, &$form_state) {
  // add css for both views
  $path = drupal_get_path('module', 'media_browser_plus');
  $form['#attached']['css'][] = $path . '/css/media_browser_plus.admin.css';
  // check which mode we are in
  if(isset($form_state['build_info']['args'][0]) && $form_state['build_info']['args'][0] != 'thumbnails')
    return _media_browser_plus_media_admin_list_alter($form, $form_state);
  // removing the options part
  // since this is not needed any more
  unset($form['options']);
  // adding our js and css
  $form['#attached']['js'][] = $path . '/js/media_browser_plus.admin.js';
  drupal_add_library('system', 'ui.draggable');
  drupal_add_library('system', 'ui.droppable');
  // remove all checkboxes from the thumbnails since
  // we operate with drag and drop instead
  foreach($form['admin']['files'] as $key => $file){
    if(is_array($file)){
      $form['admin']['files'][$key]['#type'] = 'hidden';
      $form['admin']['files'][$key]['#value'] = $key;
    }
  }
  // set base href for javascript requests
  $settings = array();
  $setting['media_browser_plus']['url'] = "http://" . $_SERVER['HTTP_HOST'] . base_path();
  $form['#attached']['js'][] = array(
    'type' => 'setting',
    'data' => $setting,
  );
  // load the media folders
  $vocabulary = taxonomy_vocabulary_machine_name_load('media_folders');
  $folders = taxonomy_get_tree($vocabulary->vid);
  $folders = _media_browser_plus_filter_folders($folders);
  $list = _media_browser_plus_create_relationship_list($folders, TRUE);
  $folders = _media_browser_plus_folder_hierarchy_list($list);
  // build the folder form
  $form['admin']['folder'] = array(
    '#type' => 'markup',
    '#markup' => '<div id="folder" style="width: 200px;">' . $folders . ' </div>'
    );
  // setting up the header
  $header = array(
    array(
      'data' => t('Categories'),
      'width' => '200'
    ),
    array(
      'data' => t('Media Files'),
      'width' => '*'
    ));
  // and the data
  $options = array(array(
      'categories' => array(
        'data' => drupal_render($form['admin']['folder']),
        'class' => array('media_column')),
      'media' => array(
        'data' => drupal_render($form['admin']['files']),
        'class' => array('media_column'))
    ),array(
      'categories' => array(
        'data' => ''),
      'media' => array(
        'data' => 'pages',
        'id' => array('media_browser_plus_pages'))
    )
  );
  // table setup
  $table = array(
    'header' => $header,
    'rows' => $options,
    'attributes' => array('id' => 'media_folder_table'),
    'empty' => t('No media added yet.')
  );
  // add filter
  //$form['filter'] = _media_browser_plus_media_filter_form();
  //$form['filter']['#prefix'] = '<div style="margin-right: 90px;">';
  //$form['filter']['#suffix'] = '</div>';
  //unset($form['filter']);
  // and put everything into a neat little table
  $form['admin'] = array(
    '#type' => 'markup',
    '#markup' => theme('table', $table)
  );
  return $form;
}

/**
 * used to alter the media list display
 */
function _media_browser_plus_media_admin_list_alter(&$form, &$form_state){
  $header = array(
    'title' => array('data' => t('Title'), 'field' => 'f.filename'),
    'type' => array('data' => t('Type'), 'field' => 'f.filemime'),
    'folder' => array('data' => t('Folder')),
    'size' => array('data' => t('Size'), 'field' => 'f.filesize'),
    'author' => array('data' => t('Author'), 'field' => 'u.name'),
    'timestamp' => array('data' => t('Updated'), 'field' => 'f.timestamp', 'sort' => 'asc'),
    'operations' => array('data' => t('Operations')),
  );
  $query = db_select('file_managed', 'f')->extend('PagerDefault')->extend('TableSort');
  $query->join('users', 'u', 'f.uid = u.uid');

  $destination = drupal_get_destination();
  $options = array();
  // filter setup
  $conditions = array();
  $order = array();
  // looking for a filter
  if(isset($_SESSION['media-filter'])){
    if(strlen($_SESSION['media-filter']['filename'])){
      $conditions[] = array("property" => array("filename", "%".$_SESSION['media-filter']['filename']."%", "LIKE"));
    }
    if(count($_SESSION['media-filter']['type'])){
      $conditions[] = array("property" => array("type", explode(",", $_SESSION['media-filter']['type']), "IN"));
    }
    if(count($_SESSION['media-filter']['field_folder'])){
      $conditions[] = array("field" => array("field_folder", "tid", $_SESSION['media-filter']['field_folder'], "IN"));
    }
  }
  $media_entities = media_browser_plus_load_multiple(array(), $conditions, $order);
  // gather the data from each media object
  foreach($media_entities as $media){
    // load folder name
    $folder = "";
    if(isset($media->field_folder[LANGUAGE_NONE][0]['tid']) &&
      ($term = taxonomy_term_load($media->field_folder[LANGUAGE_NONE][0]['tid']))){
        $folder = $term->name;
    }
    $options[$media->fid] = array(
      'title' => theme('media_link', array('file' => $media)),
      'folder' => $folder,
      'type' =>  check_plain($media->filemime),
      'size' => format_size($media->filesize),
      'author' => theme('username', array('account' => $media)),
      'timestamp' => format_date($media->timestamp, 'short'),
    );
    $options[$media->fid]['operations'] = l(t('edit'), 'media/' . $media->fid . '/edit', array('query' => $destination));
  }
  // grab old options
  $ops = $form['options']['operation']['#options'];
  // redo the options form
  unset($form['options']);
  $form['options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Operations'),
    '#weight' => -10,
    'operations' => array(
      '#type' => 'container',
      '#prefix' => '<div class="container-inline">',
      '#suffix' => '</div>',
      'operation' => array(
        '#type' => 'select',
        '#options' => $ops,
        '#default_value' => 'delete',
      ),
      'submit' => array(
       '#type' => 'submit',
       '#value' => t('Submit'),
       '#submit' => array('media_admin_submit'),
       '#validate' => array('media_admin_validate')
      )
    ),
    'folder' => array(
      '#type' => 'container',
      'selected_folder' => array(
        '#type' => 'select',
        '#title' => t('Media Folder*'),
        '#required' => FALSE,
        '#options' => _media_browser_plus_folder_list()
      ),
      'submit' => array(
        '#type' => 'container',
        '#prefix' => '<div class="container-inline">',
        '#suffix' => '</div>',
        'submit' => array(
          '#type' => 'submit',
          '#value' => t('Change Category'),
          '#submit' => array('media_browser_plus_media_admin_folder_change_submit'),
          '#validate' => array('media_admin_validate')
        ),
        'notice' => array(
          '#type' => 'item',
          '#markup' => t('*: change will be applied to ALL selected media files')
        )
      )
    )
  );
  $form['admin']['filter'] = _media_browser_plus_media_filter_form();
  $form['admin']['files']['#header'] = $header;
  $form['admin']['files']['#options'] = $options;
  // reset pager
  unset($form['admin']['pager']);
  $form['admin']['pager'] = array('#markup' => theme('pager', array('tags' => NULL)));
  //
  return $form;
}

/**
 * function called by the JS Fronted via AJAX Request to change the category of a media object
 */
function media_browser_plus_change_category(&$form, &$form_state){
  // parse values
  $folder = (int) (str_replace("folder_load_", "", $form_state['input']['folder']));
  $media = media_load((int) (str_replace("edit-files-", "", $form_state['input']['media'])));
  // apply new folder
  if(isset($media->field_folder[LANGUAGE_NONE][0]['tid']))
    $media->field_folder[LANGUAGE_NONE][0]['tid'] = $folder;
  else
    $media->field_folder = array(LANGUAGE_NONE => array(array('tid' => $folder)));
  // save and exit
  media_save($media);
  die("");
  return $form;
}

/**
 * function called by the JS Fronted via AJAX Request to get the media list for a given folder
 */
function media_browser_plus_thumbnailsJSON(){
  if(isset($_POST['folder']) || isset($_GET['folder'])){
    $post = $_POST['folder'] ? $_POST['folder'] : $_GET['folder'];
    $folder = (int) (str_replace("folder_load_", "", $post));
    // create conditions
    $conditions = array();
    if($folder != 0){
      $conditions[] = array("field" => array("field_folder", "tid", array($folder), "IN"));
      $media_entities = media_browser_plus_load_multiple(array(), $conditions);
    }
    else{
      // @TODO: Find a method for this, that works more efficiently
      // (i.e. not having to load the whole media object to get the id)
      // load first the ones which have been sorted
      $conditions[] = array("field" => array("field_folder", "tid", array($folder), "NOT IN"));
      $media_entities = media_browser_plus_load_multiple(array(), $conditions);
      // grab the IDs
      $ids = array();
      foreach($media_entities as $media){
        $ids[] = $media->fid;
      }
      // now load all except those already sorted
      $conditions = array();
      $conditions[] = array("property" => array("fid", array($ids), "NOT IN"));
      $media_entities = media_browser_plus_load_multiple(array(), $conditions);
    }
    $return = '';
    foreach($media_entities as $media){
      $return .= '<li fid="' . $media->fid . '">';
      $return .= drupal_render(media_get_thumbnail_preview(media_load($media->fid), TRUE));
      $return .= "</li>";
    }
    // append overall result count
    $return .= "<li id=\"resultCount\">". count($media_entities) ."</li>";
    // replacing the false destination
    print str_replace("thumbnailsJSON", "thumbnails", $return);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function media_browser_plus_form_media_add_upload_multiple_alter(&$form, &$form_state) {
  // This builds the tags textfield and adds the autocomplete handlers to it.
  // The #element_validate may not be necessary because this never triggers
  // hook_field_update() or hook_field_insert()
  $form['field_tags'] = _media_browser_plus_tag_form();
  $form['field_folder'] = _media_browser_plus_folder_form();
  // Change the weight of the other form items so they appear in the right order
  $form['upload']['#weight'] = 0;
  $form['submit']['#weight'] = 2;
  // Add an additional form submission callback that fires after the default.
  $form['#submit'][] = 'media_browser_plus_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function media_browser_plus_form_media_internet_add_alter(&$form, &$form_state) {
  // Add an additional form submission callback that fires after the default.
  media_browser_plus_form_media_add_upload_alter($form, $form_state);
}

/**
 * Form element validate handler for taxonomy term autocomplete element.
 *
 * Because media_browser_plus_form_media_add_upload_multiple_alter() adds a
 * tags widget to a form that is not an entity editing form, but it is desired
 * for taxonomy_autocomplete_validate() to have access to the settings of the
 * field for which this widget is being added, this handler runs before
 * taxonomy_autocomplete_validate(), and adds the expected information to
 * $form_state, as expected by taxonomy_autocomplete_validate().
 */
function media_browser_plus_prepare_taxonomy_autocomplete_validate($element, &$form_state) {
  $form_state['field'][$element['#field_name']][$element['#language']]['field'] = field_info_field($element['#field_name']);
}

/**
 * Form submit handler for the media browser forms that create new media entities.
 *
 * Enhances the media creation process by populating field content for the newly
 * created entities from user-submitted data and/or data available from a
 * remote provider.
 *
 * @see media_browser_plus_form_media_add_upload_multiple_alter()
 * @see media_browser_plus_form_media_internet_add_alter()
 */
function media_browser_plus_submit($form, &$form_state) {
  // Grab the fids of the newly created media entities from the redirect query
  // string that was created by the form's primary submit handler, and load the
  // corresponding entities.
  $fids = $form_state['redirect'][1]['query']['fid'];
  if (!is_array($fids)) {
    $fids = array($fids);
  }
  $media_entities = media_load_multiple($fids);

  // If tags have been entered, apply them to each new entity.
  if (!empty($form_state['values']['field_tags'])) {
    // Create any new taxonomy terms.
    foreach ($form_state['values']['field_tags'] as $i => &$item) {
      if ($item['tid'] == 'autocreate') {
        $term = (object) $item;
        unset($term->tid);
        taxonomy_term_save($term);
        $item['tid'] = $term->tid;
      }
      unset($item);
    }
    foreach ($media_entities as $media) {
      $media->field_tags[LANGUAGE_NONE] = $form_state['values']['field_tags'];
    }
  }
  // apply folder
  foreach ($media_entities as $media) {
      $media->field_folder[LANGUAGE_NONE] = $form_state['values']['field_folder'];
  }
  // If the new media is from a 3rd party provider, and that provider also
  // provides MRSS data about the media, then populate the title and description
  // fields from that data.
  if (!empty($form_state['values']['embed_code'])) {
    $provider = media_internet_get_provider($form_state['values']['embed_code']);
    if ($data = _media_browser_plus_metadata($provider)) {
      foreach ($data as $field_name => $value) {
        $field = field_info_field($field_name);
        // Limiting value population only if the field is of type 'text' or
        // 'text_long' isn't as extensible as would be ideal, but we need some
        // protection against populating a field with incompatible content.
        if (isset($field) && in_array($field['type'], array('text', 'text_long')) && isset($field['bundles']['media'])) {
          foreach ($media_entities as $media) {
            if (in_array($media->type, $field['bundles']['media']) && !isset($media->{$field_name}[LANGUAGE_NONE][0]['value'])) {
              $media->{$field_name}[LANGUAGE_NONE][0]['value'] = $value;
            }
          }
        }
      }
    }
  }
  foreach ($media_entities as $media) {
    media_save($media);
  }
}

/**
 * Helper function to return metadata that is available from a 3rd party media provider, such as YouTube.
 *
 * @param $provider
 *   A provider object as returned by media_internet_get_provider().
 *
 * @return
 *   An array of media metadata available from the provider, keyed on field
 *   name.
 *
 * @see http://video.search.yahoo.com/mrss
 * @see media_internet_get_provider()
 * @see MediaInternetYouTubeHandler::getMRSS()
 */
function _media_browser_plus_metadata($provider) {
  // @todo This is early, experimental code, still subject to much change. For
  //   now, we assume $provider->getMRSS() returns a SimpleXML element. We'll
  //   want to change this assumption and have it return an array instead, but
  //   that requires fixing media_retrieve_xml() to handle XML namespaces
  //   properly.
  $data = array();
  if (is_callable(array($provider, 'getMRSS')) && ($rss = $provider->getMRSS())) {
    // MRSS is an extension of RSS, so the title field is available in the
    // default (ATOM) namespace.
    $data['media_title'] = (string) $rss->title;
    // The MRSS extensions are in their own namespace.
    $mrss = $rss->children('http://search.yahoo.com/mrss/');
    $data['media_description'] = (string) $mrss->group->description;
  }
  $data = array_filter($data, 'strlen');
  return $data;
}

/**
 * Implements MODULE_preprocess_media_link().
 */
function media_browser_plus_preprocess_media_link(&$variables) {
  // Use the value of the title field, when there is one, as the link text for
  // all links that would otherwise default to the filename.
  // @todo Solve generically using the 'label' key of hook_entity_indo(). See
  //   http://drupal.org/node/910396.
  $media = media_load($variables['file']->fid);
  if (empty($variables['file']->description) && isset($media->media_title[LANGUAGE_NONE][0]['value'])) {
    $variables['file']->description = $media->media_title[LANGUAGE_NONE][0]['value'];
  }
}

/**
 * Implements MODULE_preprocess_media_thubmnail().
 */
function media_browser_plus_preprocess_media_thumbnail(&$variables) {
  // See media_browser_plus_preprocess_media_link(). Same thing here, but for
  // the links that appear underneath thumbnail previews.
  $media = $variables['element']['#object'];
  if (isset($media->media_title[LANGUAGE_NONE][0]['value'])) {
    $variables['element']['#name'] = $media->media_title[LANGUAGE_NONE][0]['value'];
  }
}

/**
 * Altering the add file upload form the include folder and tag options
 */
function media_browser_plus_form_media_add_upload_alter(&$form, &$form_state) {
  // alter weight to display new forms in correct order
  $form['file']['#weight'] = -5;
  $form['submit']['#weight'] = 5;
  $form['field_tags'] = _media_browser_plus_tag_form();
  $form['field_folder'] = _media_browser_plus_folder_form();
  $form['#submit'][] = 'media_browser_plus_submit';
}

/**
 * making sure the tagging form is below the folder form part
 */
function media_browser_plus_form_media_edit_alter(&$form, &$form_state) {
  // setting the weight accordingly
  $form['field_folder']['#weight'] = $form['field_tags']['#weight'] - 1;
}

/**
 * Enter description here ...
 */
function _media_browser_plus_tag_form(){
  return array(
    '#weight' => 1,
    '#language' => LANGUAGE_NONE,
    '#field_name' => 'field_tags',
    '#columns' => array('tid'),
    '#title' => 'Tags',
    '#description' => 'Enter a comma-separated list of words to describe your image.',
    '#required' => FALSE,
    '#delta' => 0,
    '#type' => 'textfield',
    '#default_value' => '',
    '#autocomplete_path' => 'taxonomy/autocomplete/field_tags',
    '#element_validate' => array('media_browser_plus_prepare_taxonomy_autocomplete_validate', 'taxonomy_autocomplete_validate'),
    '#size' => 60,
  );
}

/**
 * Enter description here ...
 */
function _media_browser_plus_folder_form(){
  $list = _media_browser_plus_folder_list();
  // build form and return
  return array(
      '#type' => 'select',
      '#language' => LANGUAGE_NONE,
      '#title' => t('Media Folder'),
      '#field_name' => 'field_tags',
      '#weigth' => -2,
      '#options' => $list,
      '#description' => t('Select a folder this file should be put in')
  );
}

/**
 * implement hook menu
 */
function media_browser_plus_menu(){
  $items['admin/content/media/change_category'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_browser_plus_change_category'),
    'file' => 'media_browser_plus.module',
    'access callback' => 'media_access',
    'access arguments' => array('edit')
  );
  $items['admin/content/media/thumbnailsJSON'] = array(
    'title' => 'Load Media Entities',
    'page callback' => 'media_browser_plus_thumbnailsJSON',
    'file' => 'media_browser_plus.module',
    'access callback' => 'media_access',
    'access arguments' => array('edit')
  );
  // folder management disabled until menu bug has been fixed
  /*
  $items['admin/content/media/folders'] = array(
    'title' => 'Administer folders',
    'description' => 'Manage your media folders',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_browser_plus_folder_list'),
    'file' => 'media_browser_plus.folders.inc',
    'access arguments' => array('administer media folders'),
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/content/media/folders/add'] = array(
    'title' => 'Add',
    'description' => 'Add a new media folder',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_browser_plus_folder_admin_add'),
    'access arguments' => array('administer media folders'),
    'type' => MENU_CALLBACK,
    'file' => 'media_browser_plus.folders.inc',
  );
  $items['admin/content/media/folder/%media_browser_plus_folder/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit media folder',
    'page callback' => 'drupal_get_form',
    'page arguments'  => array('media_browser_plus_folder_admin_edit_form', 4),
    'access arguments' => array('administer media folders'),
    'type' => MENU_CALLBACK,
    'file' => 'media_browser_plus.folders.inc'
  );
  $items['admin/content/media/folder/%media_browser_plus_folder/delete'] = array(
    'title' => 'Delete',
    'description' => 'Delete media folder',
    'page callback' => 'media_browser_plus_folder_admin_delete',
    'page arguments'  => array(4),
    'access arguments' => array('administer media folders'),
    'type' => MENU_CALLBACK,
    'file' => 'media_browser_plus.folders.inc'
  );
  */
  return $items;
}

/**
 * implementation of hook_load
 * used to load media folders
 */
function media_browser_plus_folder_load($id){
  return taxonomy_term_load($id);
}

/**
 * creates the folder media tree
 */
function _media_browser_plus_folder_hierarchy_list($list){
  if(!isset($list['parents']) || !isset($list['children']))
    return;
  //
  if(count($list['parents']) == 0){
    return t('No folders created yet');
  }
  else{
    if(_media_browser_plus_has_unsorted_media()){
      $all_folders = array();
      $all_folders[0] = new stdClass();
      $all_folders[0]->name = t('Unsorted');
      $all_folders[0]->tid = 0;
      //
      $list['parents'] = array_merge($all_folders, $list['parents']);
    }
    return _media_browser_plus_folder_hierarchy_list_helper($list['parents'], $list['children']);
  }
  //	
}

/**
 * @param $parents
 * @param $children
 * @param $hide
 */
function _media_browser_plus_folder_hierarchy_list_helper($parents, &$children, $hide = false){
  //
  $path = "http://" . $_SERVER['HTTP_HOST'] . base_path() . drupal_get_path('module', 'media_browser_plus');
  //
  $buffer  = "<ul ";
  $buffer .=" class=\"";
  $buffer .= $hide ? "hidden" : "";
  $buffer .= "\">\n";
  //
  foreach($parents as $item){
    $hasChildren = isset($children[$item->tid]);
    //
    $buffer .= "<li class=\"category";
    if($hasChildren){
      $buffer .= " parent\">";
      $buffer .= "<div class=\"folder fparent category-children-toggle\">" .
         "<img src=\"".$path."/images/pixel.gif\" border=\"0\" alt=\"\">" .
         "</div> ";
      $buffer .= "<div id=\"folder_load_".$item->tid."\" class=\"folder_load\">" . $item->name . "</div>\n";
      $buffer .= _media_browser_plus_folder_hierarchy_list_helper($children[$item->tid], $children, true);
      $buffer .= "</li>\n";
    }
    else {
      $buffer .= "\">";
      $buffer .= "<div class=\"folder category-children-toggle\">" .
        "<img src=\"".$path."/images/pixel.gif\" border=\"0\" alt=\"\">" .
        "</div> ";
      $buffer .= "<div id=\"folder_load_".$item->tid."\" class=\"folder_load\">" . $item->name . "</div></li>\n";
    }
  }
  $buffer .= "</ul>\n";
  return $buffer;
}

/**
 * helper function
 */
function _media_browser_plus_create_relationship_list($categories){
  $return 	= array();
  $parents 	= array();
  $children	= array();
  //
  foreach($categories as $key=>$value){
    // root node
    if($value->parents[0] == 0){
      // create parent entry
      $parents[$value->tid] = $value;
      continue;
    }
    else {
      // create child entry
      $children[$value->parents[0]][$value->tid] = $value;
      continue;
    }
  }
  // if no root parents
  if(!count($parents) && count($children)){
    foreach($children as $pid=>$parents_children){
      if(!isset($parents[$pid])){
        // move child into parent array keeping indexes
        foreach($children[$pid] as $id=>$item){
          $parents[$id] = $item;
        }
        unset($children[$pid]);
      }
    }
  }
  $return['parents'] = $parents;
  $return['children'] = $children;
  //
  return $return;
}

/**
 * checks for unsorted (i.e. media not in folders) media
 */
function _media_browser_plus_has_unsorted_media(){
  // loading media
  $entity_controller = entity_get_controller('media');
  $media_entities = $entity_controller->load(NULL, array(), 0, 100);
  //
  foreach($media_entities as $media){
  if(!isset($media->field_folder[LANGUAGE_NONE][0]['tid']))
    return true;
  }
  // none found
  return false;
}

/**
 * Enter description
 */
function _media_browser_plus_media_filter_form(){
  // getting the media folders for filter selection
  $folders = _media_browser_plus_folder_list();
  // setting default filter selections - will be overwritten when a filter is active
  $selected_types = array_keys(media_type_get_types());
  $selected_folders = array_keys($folders);
  // apply filter settings
  if(isset($_SESSION['media-filter'])){
    if(count($_SESSION['media-filter']['type'])){
      $selected_types = explode("," ,$_SESSION['media-filter']['type']);
    }
    if(count($_SESSION['media-filter']['field_folder'])){
      $selected_folders = $_SESSION['media-filter']['field_folder'];
    }
  }
  // get media types
  $types = media_type_get_types();
  $media_types = array();
  // user labels as display and value for backend
  foreach($types as $value=>$type){
    $media_types[$value] = $type->label;
  }
  $form['filter'] = array(
    '#type' => 'fieldset',
    '#title' => isset($_SESSION['media-filter']) ? t('Filter Media (active)') : t('Filter Media'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => -10,
    'filename' => array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#maxlength' => 125,
        '#size' => 40,
        '#value' => (isset($_SESSION['media-filter']['filename']) ?
                     $_SESSION['media-filter']['filename'] : ""),
        '#required' => FALSE),
    'criterias' => array(
      '#type' => 'container',
      'media_type' => array(
        '#type' => 'select',
        '#title' => t('Media Type'),
        '#multiple' => TRUE,
        '#options' => $media_types,
        '#default_value' => $selected_types,
        '#weight' => 5,
        '#required' => FALSE,
        '#attributes' => array('class' => array('media-filter-select')),
        '#prefix' => '<div style="float:left; padding-right: 20px;">',
        '#suffix' => '</div>'),
      'field_folder' => array(
        '#type' => 'select',
        '#title' => t('Media Folder'),
        '#multiple' => TRUE,
        '#required' => FALSE,
        '#options' => $folders,
        '#default_value' => $selected_folders,
        '#weight' => 6,
        '#attributes' => array('class' => array('media-filter-select')),
        '#prefix' => '<div style="float:left; padding-right: 20px;">',
        '#suffix' => '</div>')
    ),
    'include_subfolders' => array(
        '#type' => 'checkbox',
        '#weight' => 10,
        '#prefix' => '<div style="clear: both;">',
        '#suffix' => '</div>',
        '#attributes' => array('class' => array('media-filter')),
        '#title' => t('include subfolders of selected folders'),
        '#default_value' => (isset($_SESSION['media-filter']['include_subfolders']) ? 
                     $_SESSION['media-filter']['include_subfolders'] : 0)
      ),
    'actions' => array(
      '#type' => 'container',
      '#weight' => 11,
      'submit' => array(
        '#type' => 'submit',
        '#value' => t('Filter'),
        '#submit' => array('media_browser_plus_media_filter_submit'),
        '#validate' => array('media_browser_plus_media_filter_validate')
      ),
    )
  );
  if(isset($_SESSION['media-filter'])){
    $form['filter']['actions']['clear'] = array(
        '#type' => 'submit',
        '#value' => t('Clear'),
        '#submit' => array('media_browser_plus_media_filter_clear'),
        '#validate' => array('media_browser_plus_media_filter_clear_validate')
    );
  }
  return $form['filter'];
}

/**
 * Enter description
 */
function _media_browser_plus_folder_list($prefixPadding = "-"){
  //
  $vocabulary = taxonomy_vocabulary_machine_name_load('media_folders');
  $folders = taxonomy_get_tree($vocabulary->vid);
  // start with empty list
  $list = array();
  // and fill it with padded folders
  foreach($folders as $folder){
    $pad = (($folder->depth * strlen($prefixPadding)) + strlen($folder->name));
    $list[$folder->tid] = str_pad($folder->name, $pad, $prefixPadding, STR_PAD_LEFT); 
  }
  return $list;
}

/**
 * changes the folder of the submitted media items
 */
function media_browser_plus_media_admin_folder_change_submit(&$form, &$form_state){
  // get IDs
  $fids = array_keys(array_filter($form_state['values']['files']));
  $folder = (int) $form_state['values']['selected_folder'];
  // load media
  $media_entities = media_load_multiple($fids);
  // apply folder
  foreach ($media_entities as $media) {
    if(isset($media->field_folder[LANGUAGE_NONE][0]['tid']))
      $media->field_folder[LANGUAGE_NONE][0]['tid'] = $folder;
    else
      $media->field_folder = array(LANGUAGE_NONE => array(array('tid' => $folder)));
    // save changes
    media_save($media);
  }
  //
  drupal_set_message(t('Folder changes applied successfully'));
}


/**
 * Called when the filter form is submitted.
 * Adds filter to session and redirects back to callee
 * @param $argument
 */
function media_browser_plus_media_filter_submit($form, $form_state) {
  // process filter
  $_SESSION['media-filter']['filename'] = check_plain($form_state['input']['filename']);
  $_SESSION['media-filter']['type'] = count($form_state['values']['media_type']) > 0 ?
    implode(",", $form_state['values']['media_type']) :
    implode(",", media_type_get_type_names());
  $_SESSION['media-filter']['include_subfolders'] = $form_state['values']['include_subfolders'];
  //
  $temp = array();
  $vocabulary = taxonomy_vocabulary_machine_name_load('media_folders');
  //
  if(count($form_state['values']['field_folder']) == 0){
    $all = taxonomy_get_tree(taxonomy_get_tree($vocabulary->vid));
    //
    foreach($all as $key=>$term){
      $temp[$term->tid] = $term->tid;
    }
  }
  else {
    foreach($form_state['values']['field_folder'] as $key=>$value){
      $tid = $value;
      $temp[$tid] = $tid;
      //
      if($form_state['values']['include_subfolders']){
        $children = taxonomy_get_tree($vocabulary->vid, $tid);
        //
        foreach($children as $key=>$term){
          $temp[$term->tid] = $term->tid;
        }
      }
    }
  }
  $_SESSION['media-filter']['field_folder'] = array_keys($temp);
  //
  $destination = array();
  if (isset($_GET['destination'])) {
    $destination = drupal_get_destination();
    unset($_GET['destination']);
  }
  $form_state['redirect'] = array('admin/content/media/list/', array('query' => $destination));
}

/**
 *
 * Validates the filter form
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function media_browser_plus_media_filter_validate($form, &$form_state) {
  // @todo: implement filter minimum check
}

/**
 *
 * Called when the filter form is submitted.
 * Adds filter to session and redirects back to callee
 *
 * @param $argument
 */
function media_browser_plus_media_filter_clear($form, $form_state) {
  // remove filter
  unset($_SESSION['media-filter']);
  //
  $destination = array();
  if (isset($_GET['destination'])) {
    $destination = drupal_get_destination();
    unset($_GET['destination']);
  }
  $form_state['redirect'] = array('admin/content/media/list/', array('query' => $destination));
}

/**
 *
 * Clears the filter form
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function media_browser_plus_media_filter_clear_validate($form, &$form_state) {
  // @todo: implement filter minimum check
}

/**
 * loads media entities and allows filtering, sorting and paging
 *
 * @param array $ids
 *   one dimensional array of entity_ids
 * @param array $conditions
 *   multidemsional array build like this:
 *   array(array("entity" => array("comlumn", "value", "condition")),
 *         array("property" => array("comlumn", "value", "condition")),
 *         array("field" => array("field_name", "comlumn", "value", "condition")))
 * @param array $order
 *   multidemsional array build like this:
 *   array(array("entity" => array("comlumn", "direction")),
 *         array("property" => array("comlumn", "direction")),
 *         array("field" => array("comlumn", "direction")))
 */
function media_browser_plus_load_multiple($ids = array(),
                                          $conditions = array(),
                                          $order = array(),
                                          &$header = array(),
                                          $per_page = 50){
  //
  $query = new EntityFieldQuery();
  // set entity type to media
  $query->entityCondition('entity_type', 'media');
  $query->pager($per_page, 1);
  $query->initializePager();
  // parse ids if any have been passed
  if(count($ids)){
    $query->entityCondition('entity_id', $ids, 'IN');
  }
  // check for table header
  if(count($header)){
    $query->tableSort($header);
  }
  // parse conditions
  foreach($conditions as $condition){
    // look what type we have
    switch(array_pop(array_keys($condition))){
      case('entity'):
        $query->entityCondition($condition['entity'][0],
          $condition['entity'][1],
          $condition['entity'][2]);
      break;
      case('property'):
        $query->propertyCondition($condition['property'][0],
          $condition['property'][1],
          $condition['property'][2]);
      break;
      case('field'):
        $query->fieldCondition($condition['field'][0],
          $condition['field'][1],
          $condition['field'][2],
          $condition['field'][3]);
      break;
    }
  }
  // parse order array
  foreach($order as $condition){
    // look what type we have
    switch(array_pop(array_keys($condition))){
      case('entity'):
        $query->entityOrderBy($condition['entity'][0], 
          $condition['entity'][1]);
      break;
      case('property'):
        $query->propertyOrderBy($condition['property'][0],
          $condition['property'][1]);
      break;
      case('field'):
        $query->fieldOrderBy($condition['field'][0],
          $condition['field'][1],
          $condition['field'][2]);
      break;
    }
  }
  // execute query and load results
  $result = $query->execute();
  if (!empty($result['media'])) {
    return entity_load('media', array_keys($result['media']));
  }
  return array();
}

/**
 * looks if a filter is active and filters the folders accordingly
 *
 * @param array $folders
 */
function _media_browser_plus_filter_folders($folders){
  // no filter active, return unchanged $folders array
  if(!isset($_SESSION['media-filter']))
    return $folders;
  else{
    $folder_filtered = array();
    // look through the tree and add elements that match filter
    foreach($folders as $item){
      if(in_array($item->tid, $_SESSION['media-filter']['field_folder'])){
        $folder_filtered[] = $item;
      }
    }
    return $folder_filtered;
  }
}
